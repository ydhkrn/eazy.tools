{"version":3,"file":"static/js/9193.9223b6ba.chunk.js","mappings":"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","sources":["pages/tools/money/forex/api.ts","pages/tools/money/forex/constants.ts","pages/tools/money/forex/helpers.ts","pages/tools/money/forex/index.tsx","shared/components/countryFlag/index.tsx","shared/helpers/request.ts","shared/helpers/time.ts","webpack://eazy.tools-dev/./src/shared/components/countryFlag/styles.scss?2486"],"sourcesContent":["import appConstants from \"shared/constants/app\";\r\nimport { getTimestamp } from \"shared/helpers/time\";\r\nimport { LocalStorage } from \"shared/helpers/webStorage\";\r\nimport request, { T_HTTPMethod } from \"shared/helpers/request\";\r\nimport {\r\n  mapForexRateResponse,\r\n  T_ForexData,\r\n  T_ForexResponse\r\n} from \"./helpers\";\r\n\r\nexport async function fetchForexData() {\r\n  let result: T_ForexData | null = JSON.parse(\r\n    LocalStorage.getItem(appConstants.webStorage.forexData) ?? \"null\"\r\n  );\r\n\r\n  // Make the API call only when necessary\r\n  if (\r\n    !result || // if there is no cached data yet\r\n    getTimestamp() > result.timeNextUpdate // // OR if cached data is expired\r\n  ) {\r\n    const response = await request<T_ForexResponse>({\r\n      method: T_HTTPMethod.GET,\r\n      endpoint: appConstants.API.forex\r\n    });\r\n    if (response.result) {\r\n      result = mapForexRateResponse(response.result);\r\n      // Update cache with latest data\r\n      LocalStorage.setItem(\r\n        appConstants.webStorage.forexData,\r\n        JSON.stringify(result)\r\n      );\r\n    }\r\n  }\r\n\r\n  return result?.conversionRates;\r\n}\r\n","import { T_UnitConversionAllUnitsMap } from \"shared/types/unitConverter\";\r\n\r\n/**\r\n *    {\r\n *        <currency-code>: {\r\n *            name: <currency-name>,\r\n *            symbol: <recognized-currency-symbol>,\r\n *            altCode: <alpha 2 ISO 3166 country code>\r\n *        }\r\n *    }\r\n *\r\n * @see https://www.iban.com/currency-codes\r\n * @see https://www.iban.com/country-codes\r\n */\r\nconst unitsMap: T_UnitConversionAllUnitsMap = {\r\n  INR: {\r\n    name: \"Indian Rupee\",\r\n    symbol: \"₹\",\r\n    altCode: \"IN\"\r\n  },\r\n  VND: {\r\n    name: \"Vietnamese đồng\",\r\n    symbol: \"₫\",\r\n    altCode: \"VN\"\r\n  },\r\n  NZD: {\r\n    name: \"New Zealand Dollar\",\r\n    symbol: \"$\",\r\n    altCode: \"NZ\"\r\n  },\r\n  THB: {\r\n    name: \"Thai Baht\",\r\n    symbol: \"฿\",\r\n    altCode: \"TH\"\r\n  },\r\n  USD: {\r\n    name: \"US Dollar\",\r\n    symbol: \"$\",\r\n    altCode: \"US\"\r\n  },\r\n  EUR: {\r\n    name: \"Euro\",\r\n    symbol: \"€\",\r\n    altCode: \"EU\"\r\n  },\r\n  AED: {\r\n    name: \"UAE Dirham\",\r\n    symbol: \"د.إ\",\r\n    altCode: \"AE\"\r\n  },\r\n  QAR: {\r\n    name: \"Qatari Riyal\",\r\n    symbol: \"ر.ق\",\r\n    altCode: \"QA\"\r\n  },\r\n  JPY: {\r\n    name: \"Japanese Yen\",\r\n    symbol: \"¥\",\r\n    altCode: \"JP\"\r\n  },\r\n  GBP: {\r\n    name: \"Great British Pound\",\r\n    symbol: \"£\",\r\n    altCode: \"GB\"\r\n  },\r\n  RUB: {\r\n    name: \"Russian Ruble\",\r\n    symbol: \"₽\",\r\n    altCode: \"RU\"\r\n  },\r\n  CNY: {\r\n    name: \"Chinese Yuan\",\r\n    symbol: \"元\",\r\n    altCode: \"CN\"\r\n  },\r\n  AUD: {\r\n    name: \"Australian Dollar\",\r\n    symbol: \"$\",\r\n    altCode: \"AU\"\r\n  },\r\n  CAD: {\r\n    name: \"Canadian Dollar\",\r\n    symbol: \"$\",\r\n    altCode: \"CA\"\r\n  },\r\n  LAK: {\r\n    name: \"Lao Kip\",\r\n    symbol: \"₭N\",\r\n    altCode: \"LA\"\r\n  },\r\n  IDR: {\r\n    name: \"Indonesian Rupiah\",\r\n    symbol: \"Rp\",\r\n    altCode: \"ID\"\r\n  }\r\n  // : {\r\n  //   name: \"\",\r\n  //   symbol: \"¤\",\r\n  //   altCode: \"\"\r\n  // }\r\n};\r\n\r\nconst defaults = {\r\n  inputCode: \"INR\",\r\n  targetCode: \"USD\",\r\n  favoriteCodes: Object.keys(unitsMap)\r\n};\r\n\r\nconst forexConstants = {\r\n  unitsMap,\r\n  defaults\r\n}\r\n\r\nexport default forexConstants;\r\n","import { T_ConversionRates } from \"shared/components/unitConverter/types\";\r\n\r\nexport function mapForexRateResponse(response: T_ForexResponse) {\r\n  return {\r\n    baseCode: response.base_code,\r\n    conversionRates: response.conversion_rates,\r\n    timeLastUpdate: response.time_last_update_unix,\r\n    timeNextUpdate: response.time_next_update_unix\r\n  };\r\n}\r\n\r\n/**\r\n * Types\r\n */\r\nexport interface T_ForexResponse {\r\n  conversion_rates: T_ConversionRates;\r\n  base_code: string;\r\n  time_last_update_unix: number;\r\n  time_last_update_utc: string;\r\n  time_next_update_unix: number;\r\n  time_next_update_utc: string;\r\n}\r\n\r\nexport type T_ForexData = ReturnType<typeof mapForexRateResponse>;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport UnitConverter from \"shared/components/unitConverter\";\r\nimport forexConstants from \"./constants\";\r\nimport { fetchForexData } from \"./api\";\r\nimport CountryFlag from \"shared/components/countryFlag\";\r\n\r\nfunction Forex() {\r\n  const [conversionRates, setState] =\r\n    useState<Awaited<ReturnType<typeof fetchForexData>>>();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let result = await fetchForexData();\r\n\r\n      if (result) {\r\n        setState(result);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // TODO:loading indicator / animate-pulse empty content placholders\r\n  if (!conversionRates) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <UnitConverter\r\n      allUnitsMap={forexConstants.unitsMap}\r\n      conversionRates={conversionRates}\r\n      defaults={forexConstants.defaults}\r\n      UnitIconComponent={CountryFlag}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Forex;\r\n","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function CountryFlag({\r\n  code,\r\n  iconClassName = \"\",\r\n  wrapperClassName = \"\"\r\n}: T_CountryFlagProp) {\r\n  return (\r\n    <span className={wrapperClassName}>\r\n      <i\r\n        className={`countryFlagSprite countryFlag-${code.toLowerCase()} ${iconClassName}`}\r\n      ></i>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport type T_CountryFlagProp = {\r\n  code: string;\r\n  wrapperClassName?: string;\r\n  iconClassName?: string;\r\n};\r\n","export const enum T_HTTPMethod {\r\n  GET = \"GET\",\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n  PATCH = \"PATCH\",\r\n  DELETE = \"DELETE\"\r\n}\r\n\r\ninterface T_RequestOptions {\r\n  method: T_HTTPMethod;\r\n  endpoint: string;\r\n  params?: { [key: string]: any };\r\n  headers?: HeadersInit;\r\n  body?: any;\r\n  rawBody?: BodyInit | null;\r\n}\r\n\r\nexport const getQueryParams = (params: { [key: string]: string }): string =>\r\n  Object.keys(params)\r\n    .filter(\r\n      (k) =>\r\n        typeof params[k] !== \"undefined\" &&\r\n        params[k] !== null &&\r\n        params[k] !== \"\"\r\n    ) // removes if empty, but accepts \"0\"\r\n    .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\r\n    .join(\"&\");\r\n\r\nexport default async function request<T>({\r\n  method,\r\n  endpoint,\r\n  params,\r\n  headers,\r\n  body,\r\n  rawBody\r\n}: T_RequestOptions): Promise<{\r\n  result?: T;\r\n  error?: unknown;\r\n}> {\r\n  let url = endpoint;\r\n  if (params) {\r\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + getQueryParams(params);\r\n  }\r\n\r\n  const fetchOptions: RequestInit = {\r\n    headers,\r\n    method,\r\n    credentials: \"same-origin\",\r\n    mode: \"cors\"\r\n  };\r\n  if (method !== T_HTTPMethod.GET && (rawBody || body)) {\r\n    fetchOptions.body = rawBody || JSON.stringify(body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, fetchOptions);\r\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\r\n    let result: T;\r\n\r\n    if (contentType.includes(\"application/json\")) {\r\n      result = await response.json();\r\n    } else {\r\n      result = response as unknown as T;\r\n    }\r\n\r\n    if (response.status >= 400) {\r\n      throw result || (await response.text());\r\n    }\r\n\r\n    return { result };\r\n  } catch (error) {\r\n    return { error: error instanceof Error ? error.message : error };\r\n  }\r\n}\r\n","export function getTimestamp() {\r\n  return Math.floor(+Date.now() / 1000);\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["async","fetchForexData","_LocalStorage$getItem","_result","result","JSON","parse","LocalStorage","getItem","appConstants","webStorage","forexData","getTimestamp","timeNextUpdate","response","request","method","T_HTTPMethod","GET","endpoint","API","forex","mapForexRateResponse","setItem","stringify","conversionRates","unitsMap","INR","name","symbol","altCode","VND","NZD","THB","USD","EUR","AED","QAR","JPY","GBP","RUB","CNY","AUD","CAD","LAK","IDR","defaults","inputCode","targetCode","favoriteCodes","Object","keys","baseCode","base_code","conversion_rates","timeLastUpdate","time_last_update_unix","time_next_update_unix","setState","useState","useEffect","fetchData","_jsx","UnitConverter","allUnitsMap","forexConstants","UnitIconComponent","CountryFlag","_ref","code","iconClassName","wrapperClassName","className","children","toLowerCase","getQueryParams","params","filter","k","map","encodeURIComponent","join","headers","body","rawBody","url","indexOf","fetchOptions","credentials","mode","fetch","get","includes","json","status","text","error","Error","message","Math","floor","Date","now"],"sourceRoot":""}