{"version":3,"file":"static/js/2523.74a80739.chunk.js","mappings":"sOAAkBA,E,gCAAlB,SAAkBA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,KAAAA,OAAAA,EAAAA,IAAAA,MAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,QAAAA,CAAlB,CAAkBA,IAAAA,EAAAA,CAAAA,IAiBX,IAAMC,EAAiB,SAACC,GAAD,OAC5BC,OAAOC,KAAKF,GACTG,QACC,SAACC,GAAD,MACuB,qBAAdJ,EAAOI,IACA,OAAdJ,EAAOI,IACO,KAAdJ,EAAOI,EAHT,IAKDC,KAAI,SAACD,GAAD,gBAAUE,mBAAmBF,GAA7B,YAAmCE,mBAAmBN,EAAOI,IAA7D,IACJG,KAAK,IAToB,EAWf,SAAeC,EAA9B,+CAAe,OAAf,oBAAe,8GACbC,EADa,EACbA,OACAC,EAFa,EAEbA,SACAV,EAHa,EAGbA,OACAW,EAJa,EAIbA,QACAC,EALa,EAKbA,KACAC,EANa,EAMbA,QAKIC,EAAMJ,EACNV,IACFc,KAA8B,IAAtBA,EAAIC,QAAQ,KAAc,IAAM,KAAOhB,EAAeC,IAG1DgB,EAA4B,CAChCL,QAAAA,EACAF,OAAAA,EACAQ,YAAa,cACbC,KAAM,QAEJT,IAAWX,EAAaqB,MAAQN,GAAWD,KAC7CI,EAAaJ,KAAOC,GAAWO,KAAKC,UAAUT,IAvBnC,kBA2BYU,MAAMR,EAAKE,GA3BvB,UA2BLO,EA3BK,SA4BSA,EAASZ,QAAQa,IAAI,iBAAmB,IAG5CC,SAAS,oBA/Bd,kCAgCMF,EAASG,OAhCf,QAgCTC,EAhCS,+BAkCTA,EAASJ,EAlCA,aAqCPA,EAASK,QAAU,KArCZ,yBAsCHD,EAtCG,uCAsCcJ,EAASM,OAtCvB,wEAyCJ,CAAEF,OAAAA,IAzCE,2DA2CJ,CAAEG,MAAO,gBAAiBC,MAAQ,KAAMC,QAA/B,OA3CL,iF","sources":["shared/helpers/request.ts"],"sourcesContent":["export const enum T_HTTPMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  PATCH = \"PATCH\",\n  DELETE = \"DELETE\"\n}\n\ninterface T_RequestOptions {\n  method: T_HTTPMethod;\n  endpoint: string;\n  params?: { [key: string]: any };\n  headers?: HeadersInit;\n  body?: any;\n  rawBody?: BodyInit | null;\n}\n\nexport const getQueryParams = (params: { [key: string]: string }): string =>\n  Object.keys(params)\n    .filter(\n      (k) =>\n        typeof params[k] !== \"undefined\" &&\n        params[k] !== null &&\n        params[k] !== \"\"\n    ) // removes if empty, but accepts \"0\"\n    .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n    .join(\"&\");\n\nexport default async function request<T>({\n  method,\n  endpoint,\n  params,\n  headers,\n  body,\n  rawBody\n}: T_RequestOptions): Promise<{\n  result?: T;\n  error?: unknown;\n}> {\n  let url = endpoint;\n  if (params) {\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + getQueryParams(params);\n  }\n\n  const fetchOptions: RequestInit = {\n    headers,\n    method,\n    credentials: \"same-origin\",\n    mode: \"cors\"\n  };\n  if (method !== T_HTTPMethod.GET && (rawBody || body)) {\n    fetchOptions.body = rawBody || JSON.stringify(body);\n  }\n\n  try {\n    const response = await fetch(url, fetchOptions);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    let result: T;\n\n    if (contentType.includes(\"application/json\")) {\n      result = await response.json();\n    } else {\n      result = response as unknown as T;\n    }\n\n    if (response.status >= 400) {\n      throw result || (await response.text());\n    }\n\n    return { result };\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : error };\n  }\n}\n"],"names":["T_HTTPMethod","getQueryParams","params","Object","keys","filter","k","map","encodeURIComponent","join","request","method","endpoint","headers","body","rawBody","url","indexOf","fetchOptions","credentials","mode","GET","JSON","stringify","fetch","response","get","includes","json","result","status","text","error","Error","message"],"sourceRoot":""}