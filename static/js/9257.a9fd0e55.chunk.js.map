{"version":3,"file":"static/js/9257.a9fd0e55.chunk.js","mappings":"iLAOaA,EAAwC,CAInDC,GAAI,CACFC,KAAM,aACNC,OAAQ,MAEVC,GAAI,CACFF,KAAM,aACNC,OAAQ,MAEVE,EAAG,CACDH,KAAM,QACNC,OAAQ,KAEVG,GAAI,CACFJ,KAAM,YACNC,OAAQ,MAKVI,GAAI,CACFL,KAAM,OACNC,OAAQ,MAEVK,GAAI,CACFN,KAAM,OACNC,OAAQ,MAEVM,GAAI,CACFP,KAAM,OACNC,OAAQ,MAEVO,GAAI,CACFR,KAAM,OACNC,OAAQ,OAwBNQ,EAA2C,CAC/CC,aArBe,IAsBfC,WAAY,CACVR,EAAG,SAACS,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAASF,GALN,EAKiC,EAC5Db,GAAI,SAACa,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GANP,EAMyC,EACpER,GAAI,SAACQ,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,KAAJF,GAPP,EAO0C,EACrEV,GAAI,SAACU,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GARP,EAQwC,EACnEP,GAAI,SAACO,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,SAAJF,GATP,EAS6C,EACxEN,GAAI,SAACM,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,QAAJF,GAVP,EAU4C,EACvEL,GAAI,SAACK,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,QAAJF,GAXP,EAW4C,EACvEJ,GAAI,SAACI,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GAZP,EAY4C,GAEzEG,WAAY,CACVZ,EAAG,SAACS,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAASF,GAfN,EAeiC,EAC5Db,GAAI,SAACa,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,KAAJF,GAhBP,EAgB0C,EACrER,GAAI,SAACQ,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GAjBP,EAiByC,EACpEV,GAAI,SAACU,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GAlBP,EAkByC,EACpEP,GAAI,SAACO,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GAnBP,EAmB2C,EACtEN,GAAI,SAACM,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GApBP,EAoB2C,EACtEL,GAAI,SAACK,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GArBP,EAqB2C,EACtEJ,GAAI,SAACI,GAAS,OAAKC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,SAAJF,GAtBP,EAsB6C,IAItEI,EAAW,CACfC,UAAW,KACXC,WAAY,IACZC,cAAeC,OAAOC,KAAKvB,IAGvBwB,EAAkB,CACtBxB,SAAAA,EACAyB,SApDe,IAqDfP,SAAAA,EACAQ,gBArDsB,CAItBrB,EAAG,EACHJ,GAAI,IACJK,GAAI,KACJF,GAAI,IAIJG,GAAI,SACJC,GAAI,QACJC,GAAI,SACJC,GAAI,aAwCJC,mBAAAA,GAGF,W,4EC1FA,UAXA,WACE,OACE,SAAC,UAAa,CACZgB,YAAaH,EAAAA,QAAAA,SACbN,SAAUM,EAAAA,QAAAA,SAEVb,mBAAoBa,EAAAA,QAAAA,oBAG1B,C","sources":["pages/tools/convert/length/constants.ts","pages/tools/convert/length/index.tsx"],"sourcesContent":["import { T_FavoriteCodes } from \"shared/components/unitConverter/types\";\nimport { round, toNumber } from \"shared/helpers/number\";\nimport {\n  T_ConversionFormulas,\n  T_UnitConversionAllUnitsMap\n} from \"shared/types/unitConverter\";\n\nexport const unitsMap: T_UnitConversionAllUnitsMap = {\n  /**\n   * Metric\n   */\n  mm: {\n    name: \"Millimeter\",\n    symbol: \"mm\"\n  },\n  cm: {\n    name: \"Centimeter\",\n    symbol: \"cm\"\n  },\n  m: {\n    name: \"Meter\",\n    symbol: \"m\"\n  },\n  km: {\n    name: \"Kilometer\",\n    symbol: \"km\"\n  },\n  /**\n   * British Imperial / US customary\n   */\n  in: {\n    name: \"Inch\",\n    symbol: \"in\"\n  },\n  ft: {\n    name: \"Feet\",\n    symbol: \"ft\"\n  },\n  yd: {\n    name: \"Yard\",\n    symbol: \"yd\"\n  },\n  mi: {\n    name: \"Mile\",\n    symbol: \"mi\"\n  }\n};\n\nconst baseUnit = \"m\";\nconst conversionRates = {\n  /**\n   * Metric\n   */\n  m: 1,\n  mm: 1000,\n  km: 0.001,\n  cm: 100,\n  /**\n   * British Imperial / US customary\n   */\n  in: 39.37008,\n  ft: 3.28084,\n  yd: 1.093613,\n  mi: 0.0006213712\n};\n\nconst roundingFractionDigits = 7;\n\nconst conversionFormulas: T_ConversionFormulas = {\n  baseUnitCode: baseUnit,\n  fromBaseTo: {\n    m: (x: number) => round(toNumber(x), roundingFractionDigits),\n    mm: (x: number) => round(toNumber(x * 1000), roundingFractionDigits),\n    km: (x: number) => round(toNumber(x * 0.001), roundingFractionDigits),\n    cm: (x: number) => round(toNumber(x * 100), roundingFractionDigits),\n    in: (x: number) => round(toNumber(x * 39.37008), roundingFractionDigits),\n    ft: (x: number) => round(toNumber(x * 3.28084), roundingFractionDigits),\n    yd: (x: number) => round(toNumber(x * 1.09361), roundingFractionDigits),\n    mi: (x: number) => round(toNumber(x * 0.00062), roundingFractionDigits)\n  },\n  toBaseFrom: {\n    m: (x: number) => round(toNumber(x), roundingFractionDigits),\n    mm: (x: number) => round(toNumber(x * 0.001), roundingFractionDigits),\n    km: (x: number) => round(toNumber(x * 1000), roundingFractionDigits),\n    cm: (x: number) => round(toNumber(x * 0.01), roundingFractionDigits),\n    in: (x: number) => round(toNumber(x * 0.0254), roundingFractionDigits),\n    ft: (x: number) => round(toNumber(x * 0.3048), roundingFractionDigits),\n    yd: (x: number) => round(toNumber(x * 0.9144), roundingFractionDigits),\n    mi: (x: number) => round(toNumber(x * 1609.344), roundingFractionDigits)\n  }\n};\n\nconst defaults = {\n  inputCode: \"ft\",\n  targetCode: \"m\",\n  favoriteCodes: Object.keys(unitsMap) as T_FavoriteCodes\n};\n\nconst lengthConstants = {\n  unitsMap,\n  baseUnit,\n  defaults,\n  conversionRates,\n  conversionFormulas\n};\n\nexport default lengthConstants;\n","import React from \"react\";\n\nimport UnitConverter from \"shared/components/unitConverter\";\nimport lengthConstants from \"./constants\";\n\nfunction Length() {\n  return (\n    <UnitConverter\n      allUnitsMap={lengthConstants.unitsMap}\n      defaults={lengthConstants.defaults}\n      // conversionRates={lengthConstants.conversionRates}\n      conversionFormulas={lengthConstants.conversionFormulas}\n    />\n  );\n}\n\nexport default Length;\n"],"names":["unitsMap","mm","name","symbol","cm","m","km","in","ft","yd","mi","conversionFormulas","baseUnitCode","fromBaseTo","x","round","toNumber","toBaseFrom","defaults","inputCode","targetCode","favoriteCodes","Object","keys","lengthConstants","baseUnit","conversionRates","allUnitsMap"],"sourceRoot":""}