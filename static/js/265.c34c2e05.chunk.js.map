{"version":3,"file":"static/js/265.c34c2e05.chunk.js","mappings":"6WAIO,SAASA,EAAsCC,GACpD,IAAMC,EAAMC,EAAAA,GAAAA,MACNC,EAAa,CAACC,EAAuBH,IAM3C,OALID,GACFG,EAAWE,KAAI,MAAfF,GAAU,OACLH,EAAeM,KAAI,SAACC,GAAE,OAAKH,EAAuBH,EAAKM,EAAG,MAG1DJ,CACT,CAEO,SAASC,EACdI,EACAC,GAEA,IAAMC,EAAgBD,EAAWD,EAASG,QAAQF,GAAYD,EAG5DI,EAeEF,EAfFE,SACAC,EAcEH,EAdFG,eACAC,EAaEJ,EAbFI,gBAEAC,EAWEL,EAXFK,KACAC,EAUEN,EAVFM,OACAC,EASEP,EATFO,OACAC,EAQER,EARFQ,QAEAC,EAMET,EANFS,KACAC,EAKEV,EALFU,WACAC,EAIEX,EAJFW,UACAC,EAGEZ,EAHFY,IACAC,EAEEb,EAFFa,YACAC,EACEd,EADFc,aAGIC,EAAeC,EAAwBd,GACvCe,EAAWjB,EAAckB,SAAS,KAClCC,EAAcC,EAAAA,QAAAA,MAClB,SAACC,GAAI,OAAKA,EAAKtB,WAAagB,CAAY,KACrC,CACHO,YAAa,GACbC,YAAa,IAGf,OAAO,gBACLC,cAAe1B,EAAS2B,QACxBC,SAAU3B,EACVgB,aAAAA,EACAZ,eAAAA,EACAC,gBAAAA,GACGe,GAAW,IACdd,KAAML,EAAckB,SAAS,MAC7BZ,OAAQN,EAAckB,SAAS,MAC/BX,OAAQP,EAAckB,SAAS,MAC/BD,SAAAA,EACAT,QAAAA,EACAC,KAAAA,EACAC,WAAAA,EACAC,UAAAA,EACAC,IAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAa,QAAUtB,EAAO,GAAM,IAAOC,EAAS,GAAM,GAAK,GAClDsB,UAAYtB,EAAS,GAAM,IAAOC,EAAS,GAAM,EAAI,GACrDsB,UAAYtB,EAAS,GAAM,IAAM,IAErC,CAEO,IAAMuB,EAAoBd,EAAwBxB,EAAAA,GAAAA,MAAeU,UAEjE,SAASc,EAAwBD,GACtC,OAAOA,EAAagB,QAElB,WACA,UAEJ,C,gHC3EO,SAASC,EAAc1C,GAC5B,IAAM2C,EAAmC,OAAd3C,QAAc,IAAdA,OAAc,EAAdA,EAAgB4C,QACzC,SAACrC,GAAE,OAAKiC,EAAAA,oBAAsBjC,CAAE,IAGlC,GAA0BsC,EAAAA,EAAAA,WACxB9C,EAAAA,EAAAA,uCAAsC4C,IACvC,eAFMG,EAAK,KAAEC,EAAQ,KAatB,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BH,GAAShD,EAAAA,EAAAA,uCAAsC4C,GACjD,GAAG,KACH,OAAO,kBAAMQ,cAAcF,EAAY,CAGzC,GAAG,CAACjD,IAEG8C,CACT,C","sources":["shared/helpers/timeZone/index.ts","shared/hooks/clocksData/index.ts"],"sourcesContent":["import { DateTime } from \"luxon\";\nimport worldCountries from \"shared/constants/worldCountries\";\nimport { T_ClockDataOfTimeZone } from \"./types\";\n\nexport function getClocksDataOfLocalAndOtherTimeZones(otherTimeZones?: string[]) {\n  const now = DateTime.now();\n  const clocksData = [getClockDataOfTimeZone(now)];\n  if (otherTimeZones) {\n    clocksData.push(\n      ...otherTimeZones.map((tz) => getClockDataOfTimeZone(now, tz))\n    );\n  }\n  return clocksData;\n}\n\nexport function getClockDataOfTimeZone(\n  datetime: DateTime,\n  timeZone?: string\n): T_ClockDataOfTimeZone {\n  const nowInTimeZone = timeZone ? datetime.setZone(timeZone) : datetime;\n  const {\n    // timeZone\n    zoneName,\n    offsetNameLong,\n    offsetNameShort,\n    // time\n    hour,\n    minute,\n    second,\n    isInDST,\n    // date\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort\n  } = nowInTimeZone;\n\n  const timeZoneName = standardizeTimeZoneName(zoneName);\n  const meridiem = nowInTimeZone.toFormat(\"a\");\n  const countryInfo = worldCountries.find(\n    (info) => info.timeZone === timeZoneName\n  ) || {\n    countryCode: \"\",\n    countryName: \"\"\n  };\n\n  return {\n    timeISOString: datetime.toISO(),\n    isLocal: !timeZone,\n    timeZoneName,\n    offsetNameLong,\n    offsetNameShort,\n    ...countryInfo,\n    hour: nowInTimeZone.toFormat(\"hh\"),\n    minute: nowInTimeZone.toFormat(\"mm\"),\n    second: nowInTimeZone.toFormat(\"ss\"),\n    meridiem,\n    isInDST,\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort,\n    hourDeg: (hour / 12) * 360 + (minute / 60) * 30 + 90,\n    minuteDeg: (minute / 60) * 360 + (second / 60) * 6 + 90,\n    secondDeg: (second / 60) * 360 + 90\n  };\n}\n\nexport const localTimeZoneName = standardizeTimeZoneName(DateTime.now().zoneName);\n\nexport function standardizeTimeZoneName(timeZoneName: string) {\n  return timeZoneName.replace(\n    // TODO: Stupid Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=580195\n    \"Calcutta\",\n    \"Kolkata\"\n  );\n}\n","import { useEffect, useState } from \"react\";\n\nimport { T_ClocksDataState } from \"shared/helpers/timeZone/types\";\nimport { getClocksDataOfLocalAndOtherTimeZones, localTimeZoneName } from \"shared/helpers/timeZone\";\n\nexport function useClocksData(otherTimeZones?: string[]) {\n  const otherTimeZonesOnly = otherTimeZones?.filter(\n    (tz) => localTimeZoneName !== tz\n  );\n\n  const [state, setState] = useState<T_ClocksDataState>(\n    getClocksDataOfLocalAndOtherTimeZones(otherTimeZonesOnly)\n  );\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setState(getClocksDataOfLocalAndOtherTimeZones(otherTimeZonesOnly));\n    }, 1000);\n    return () => clearInterval(intervalId);\n    // otherTimeZonesWithoutLocal is computed based on otherTimeZones\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [otherTimeZones]);\n\n  return state;\n}\n"],"names":["getClocksDataOfLocalAndOtherTimeZones","otherTimeZones","now","DateTime","clocksData","getClockDataOfTimeZone","push","map","tz","datetime","timeZone","nowInTimeZone","setZone","zoneName","offsetNameLong","offsetNameShort","hour","minute","second","isInDST","year","monthShort","monthLong","day","weekdayLong","weekdayShort","timeZoneName","standardizeTimeZoneName","meridiem","toFormat","countryInfo","worldCountries","info","countryCode","countryName","timeISOString","toISO","isLocal","hourDeg","minuteDeg","secondDeg","localTimeZoneName","replace","useClocksData","otherTimeZonesOnly","filter","useState","state","setState","useEffect","intervalId","setInterval","clearInterval"],"sourceRoot":""}