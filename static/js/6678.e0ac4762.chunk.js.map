{"version":3,"file":"static/js/6678.e0ac4762.chunk.js","mappings":"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","sources":["shared/components/unitConverter/helpers.ts","shared/components/unitConverter/hooks.ts","shared/components/unitConverter/types.ts","shared/helpers/number.ts","shared/helpers/pageCache.ts","shared/helpers/webStorage.ts"],"sourcesContent":["import {\r\n  T_ConversionRates,\r\n  T_FavoriteCodes,\r\n  T_FavoritesWithValue\r\n} from \"shared/components/unitConverter/types\";\r\nimport { round, toNumber } from \"shared/helpers/number\";\r\nimport { T_StringOrNumber } from \"shared/types/common\";\r\nimport { T_ConversionFormulas } from \"shared/types/unitConverter\";\r\n\r\nexport function sanitizeNumericInput(value: string) {\r\n  return (\r\n    value\r\n      // allow only numbers (with/without decimal values)\r\n      .replace(/[^0-9.]/g, \"\")\r\n      // allow only one decimal\r\n      .replace(/(\\..*?)\\..*/g, \"$1\")\r\n      // add a leading zero if the input is just a decimal point\r\n      // this will help 'toNumber' method to cast \"0.\" to 0\r\n      .replace(/^(\\.)$/, \"0.\")\r\n      // allow leading zero only for decimal values\r\n      .replace(/^0(\\d)/, \"$1\")\r\n  );\r\n}\r\n\r\nexport function getDefaultFavorites(\r\n  favoriteCodes: T_FavoriteCodes\r\n): T_FavoritesWithValue {\r\n  return favoriteCodes.map((code) => ({ code, value: \"\" }));\r\n}\r\n\r\nexport function calcValueForFavorites({\r\n  favorites,\r\n  conversionRates,\r\n  conversionFormulas,\r\n  inputCode,\r\n  inputValue\r\n}: T_CalcValueForFavoritesFnParams): T_FavoritesWithValue {\r\n  return favorites.map((favItem) => ({\r\n    ...favItem,\r\n    value: calcValue({\r\n      conversionRates,\r\n      conversionFormulas,\r\n      inputCode,\r\n      targetCode: favItem.code,\r\n      inputValue\r\n    })\r\n  }));\r\n}\r\n\r\nexport function calcValue({\r\n  conversionRates,\r\n  conversionFormulas,\r\n  inputCode,\r\n  targetCode,\r\n  inputValue\r\n}: T_CalcValueFnParams): T_StringOrNumber {\r\n  if (conversionFormulas) {\r\n    return calcValueBasedOnFormula({\r\n      conversionFormulas,\r\n      inputCode,\r\n      targetCode,\r\n      inputValue\r\n    });\r\n  } else if (conversionRates) {\r\n    return calcValueBasedOnRatio({\r\n      conversionRates,\r\n      inputCode,\r\n      targetCode,\r\n      inputValue\r\n    });\r\n  } else {\r\n    return inputValue;\r\n  }\r\n}\r\n\r\n/**\r\n * Assume:\r\n *    base code (of master data): BBB\r\n *    input code: CCC\r\n *    input value: x\r\n *    target code: YYY\r\n *\r\n * and we know (from master data):\r\n *    1 BBB = n1 CCC\r\n *    1 BBB = n2 YYY\r\n *\r\n * then,\r\n *               1 CCC  =  (1 / n1) BBB\r\n *               x CCC  =  x * (1 / n1) BBB\r\n *    x * (1 / n1) BBB  =  n2 * x * (1 / n1) YYY\r\n *               x CCC  =  n2 * x * / n1 YYY\r\n */\r\nfunction calcValueBasedOnRatio({\r\n  conversionRates,\r\n  inputCode,\r\n  targetCode,\r\n  inputValue\r\n}: { conversionRates: T_ConversionRates } & T_CalcValueFnParams) {\r\n  const x = toNumber(inputValue);\r\n  const n1 = conversionRates[inputCode];\r\n  const n2 = conversionRates[targetCode];\r\n\r\n  return round((n2 * x) / n1);\r\n}\r\n\r\nfunction calcValueBasedOnFormula({\r\n  conversionFormulas,\r\n  inputCode,\r\n  targetCode,\r\n  inputValue\r\n}: { conversionFormulas: T_ConversionFormulas } & T_CalcValueFnParams) {\r\n  let targetValue: T_StringOrNumber = 0;\r\n\r\n  if (inputCode === conversionFormulas.baseUnitCode) {\r\n    return conversionFormulas.fromBaseTo[targetCode](inputValue);\r\n  }\r\n\r\n  targetValue = conversionFormulas.toBaseFrom[inputCode](inputValue);\r\n\r\n  if (targetCode === conversionFormulas.baseUnitCode) {\r\n    return targetValue;\r\n  } else {\r\n    return conversionFormulas.fromBaseTo[targetCode](targetValue);\r\n  }\r\n}\r\n\r\ntype T_CalcValueForFavoritesFnParams = Omit<\r\n  T_CalcValueFnParams,\r\n  \"targetCode\"\r\n> & {\r\n  favorites: T_FavoritesWithValue;\r\n};\r\n\r\ntype T_CalcValueFnParams = {\r\n  inputCode: string;\r\n  targetCode: string;\r\n  inputValue: T_StringOrNumber;\r\n  conversionRates?: T_ConversionRates;\r\n  conversionFormulas?: T_ConversionFormulas;\r\n};\r\n","import React, { useMemo, useRef } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport PageCache from \"shared/helpers/pageCache\";\r\nimport {\r\n  sanitizeNumericInput,\r\n  getDefaultFavorites,\r\n  calcValue,\r\n  calcValueForFavorites\r\n} from \"./helpers\";\r\nimport {\r\n  E_PageCacheKeys,\r\n  E_UnitConverterActions,\r\n  E_UnitConverterListItemActions,\r\n  T_FavoriteCodes,\r\n  T_UnitConverterAction,\r\n  T_UnitConverterConversionLogicProps,\r\n  T_UnitConverterPropsDefaults,\r\n  T_UnitConverterState\r\n} from \"./types\";\r\n\r\nexport function useElementHandlers(\r\n  dispatch: React.Dispatch<T_UnitConverterAction>,\r\n  pageCache: PageCache\r\n) {\r\n  const inputValueEl = useRef<HTMLInputElement>(null);\r\n  const targetValueEl = useRef<HTMLInputElement>(null);\r\n\r\n  const eventHandlers = useMemo(() => {\r\n    const handleInputValueChange = (\r\n      event: React.ChangeEvent<HTMLInputElement>\r\n    ) => dispatch([E_UnitConverterActions.setInputValue, event.target.value]);\r\n    const handleTargetValueChange = (\r\n      event: React.ChangeEvent<HTMLInputElement>\r\n    ) => dispatch([E_UnitConverterActions.setTargetValue, event.target.value]);\r\n    const handleListItemAction = (\r\n      event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n    ) => {\r\n      const { code, actionName } = event.currentTarget.dataset;\r\n      if (code && actionName) {\r\n        switch (actionName as unknown as E_UnitConverterListItemActions) {\r\n          case E_UnitConverterListItemActions.input: {\r\n            pageCache.set(E_PageCacheKeys.inputCode, code);\r\n            dispatch([E_UnitConverterActions.setInputCode, code]);\r\n            inputValueEl.current?.focus();\r\n            return;\r\n          }\r\n          case E_UnitConverterListItemActions.target: {\r\n            pageCache.set(E_PageCacheKeys.targetCode, code);\r\n            dispatch([E_UnitConverterActions.setTargetCode, code]);\r\n            targetValueEl.current?.focus();\r\n            return;\r\n          }\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    };\r\n    const handleInputTargetCodeSwapClick = (\r\n      inputCode: string,\r\n      targetCode: string\r\n    ) => {\r\n      pageCache.set(E_PageCacheKeys.inputCode, targetCode);\r\n      pageCache.set(E_PageCacheKeys.targetCode, inputCode);\r\n      dispatch([E_UnitConverterActions.swapInputTargetCode]);\r\n      inputValueEl.current?.focus();\r\n    };\r\n    const handleInputClearClick = () => {\r\n      dispatch([E_UnitConverterActions.setInputValue, \"\"]);\r\n      inputValueEl.current?.focus();\r\n    };\r\n    const handleTargetClearClick = () => {\r\n      dispatch([E_UnitConverterActions.setTargetValue, \"\"]);\r\n      targetValueEl.current?.focus();\r\n    };\r\n\r\n    return {\r\n      handleInputValueChange,\r\n      handleTargetValueChange,\r\n      handleListItemAction,\r\n      handleInputClearClick,\r\n      handleTargetClearClick,\r\n      handleInputTargetCodeSwapClick\r\n    };\r\n  }, [dispatch, pageCache]);\r\n\r\n  return {\r\n    inputValueEl,\r\n    targetValueEl,\r\n    ...eventHandlers\r\n  };\r\n}\r\n\r\nexport function useDefaults(defaults: T_UnitConverterPropsDefaults) {\r\n  const location = useLocation();\r\n\r\n  return useMemo(() => {\r\n    const pageCache = new PageCache(location.pathname);\r\n    return {\r\n      inputCode:\r\n        pageCache.get<string>(E_PageCacheKeys.inputCode) || defaults.inputCode,\r\n      targetCode:\r\n        pageCache.get<string>(E_PageCacheKeys.targetCode) ||\r\n        defaults.targetCode,\r\n      favorites: getDefaultFavorites(\r\n        (pageCache.get(E_PageCacheKeys.favoriteCodes) as T_FavoriteCodes) ||\r\n          defaults.favoriteCodes\r\n      ),\r\n      pageCache\r\n    };\r\n  }, [location, defaults]);\r\n}\r\n\r\nexport function createReducer(props: T_UnitConverterConversionLogicProps) {\r\n  return (\r\n    state: T_UnitConverterState,\r\n    [type, payload]: T_UnitConverterAction\r\n  ) => {\r\n    if (!props.conversionRates && !props.conversionFormulas) {\r\n      return state;\r\n    }\r\n\r\n    const conversionLogicProps = {\r\n      conversionRates: props.conversionRates,\r\n      conversionFormulas: props.conversionFormulas\r\n    };\r\n\r\n    switch (type) {\r\n      case E_UnitConverterActions.setInputCode: {\r\n        return {\r\n          ...state,\r\n          inputCode: payload,\r\n          targetValue: calcValue({\r\n            ...conversionLogicProps,\r\n            inputCode: payload,\r\n            targetCode: state.targetCode,\r\n            inputValue: state.inputValue\r\n          }),\r\n          favorites: calcValueForFavorites({\r\n            ...conversionLogicProps,\r\n            favorites: state.favorites,\r\n            inputCode: payload,\r\n            inputValue: state.inputValue\r\n          })\r\n        };\r\n      }\r\n\r\n      case E_UnitConverterActions.setTargetCode: {\r\n        const newInputValue = calcValue({\r\n          ...conversionLogicProps,\r\n          inputCode: payload,\r\n          targetCode: state.inputCode,\r\n          inputValue: state.targetValue\r\n        });\r\n\r\n        return {\r\n          ...state,\r\n          targetCode: payload,\r\n          inputValue: newInputValue,\r\n          favorites: calcValueForFavorites({\r\n            ...conversionLogicProps,\r\n            favorites: state.favorites,\r\n            inputCode: state.inputCode,\r\n            inputValue: newInputValue\r\n          })\r\n        };\r\n      }\r\n\r\n      case E_UnitConverterActions.swapInputTargetCode: {\r\n        return {\r\n          ...state,\r\n          inputCode: state.targetCode,\r\n          targetCode: state.inputCode,\r\n          inputValue: state.targetValue,\r\n          targetValue: state.inputValue\r\n        };\r\n      }\r\n\r\n      case E_UnitConverterActions.setInputValue: {\r\n        const sanitizedInputValue = sanitizeNumericInput(payload);\r\n\r\n        // Avoid state update (and re-render) if there is no change\r\n        if (sanitizedInputValue === state.inputValue) {\r\n          return state;\r\n        }\r\n\r\n        return {\r\n          ...state,\r\n          inputValue: sanitizedInputValue,\r\n          targetValue: calcValue({\r\n            ...conversionLogicProps,\r\n            inputCode: state.inputCode,\r\n            targetCode: state.targetCode,\r\n            inputValue: sanitizedInputValue\r\n          }),\r\n          favorites: calcValueForFavorites({\r\n            ...conversionLogicProps,\r\n            favorites: state.favorites,\r\n            inputCode: state.inputCode,\r\n            inputValue: sanitizedInputValue\r\n          })\r\n        };\r\n      }\r\n\r\n      case E_UnitConverterActions.setTargetValue: {\r\n        const sanitizedTargetValue = sanitizeNumericInput(payload);\r\n\r\n        // Avoid state update (and re-render) if there is no change\r\n        if (sanitizedTargetValue === state.targetValue) {\r\n          return state;\r\n        }\r\n\r\n        const newInputValue = calcValue({\r\n          ...conversionLogicProps,\r\n          inputCode: state.targetCode,\r\n          targetCode: state.inputCode,\r\n          inputValue: sanitizedTargetValue\r\n        });\r\n\r\n        return {\r\n          ...state,\r\n          inputValue: newInputValue,\r\n          targetValue: sanitizedTargetValue,\r\n          favorites: calcValueForFavorites({\r\n            ...conversionLogicProps,\r\n            favorites: state.favorites,\r\n            inputCode: state.inputCode,\r\n            inputValue: newInputValue\r\n          })\r\n        };\r\n      }\r\n\r\n      case E_UnitConverterActions.toggleFavorite: {\r\n        const favoritesArrWithoutPayloadItem = state.favorites.filter(\r\n          (favItem) => favItem.code !== payload\r\n        );\r\n\r\n        // Check if the filtering resulted in a smaller array than state.favorites\r\n        if (favoritesArrWithoutPayloadItem.length < state.favorites.length) {\r\n          // This means that the supplied item already existed in state.favorites\r\n          // and we just obtained an array after removing it.\r\n          return {\r\n            ...state,\r\n            favorites: favoritesArrWithoutPayloadItem\r\n          };\r\n        }\r\n\r\n        // Otherwise it means that payload item is a new item to be favorited\r\n        return {\r\n          ...state,\r\n          favorites: [...state.favorites, payload]\r\n        };\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  T_ConversionFormulas,\r\n  T_UnitConversionAllUnitsMap\r\n} from \"shared/types/unitConverter\";\r\nimport { T_Object } from \"shared/types/generics\";\r\nimport { T_StringOrNumber } from \"shared/types/common\";\r\n\r\nexport const enum E_PageCacheKeys {\r\n  inputCode = \"inputCode\",\r\n  targetCode = \"targetCode\",\r\n  favoriteCodes = \"favoriteCodes\"\r\n}\r\n\r\nexport const enum E_UnitConverterListItemActions {\r\n  input = \"INPUT\",\r\n  target = \"TARGET\"\r\n}\r\n\r\nexport const enum E_UnitConverterActions {\r\n  setInputCode,\r\n  setTargetCode,\r\n  setInputValue,\r\n  setTargetValue,\r\n  swapInputTargetCode,\r\n  toggleFavorite\r\n}\r\n\r\nexport type T_ConverionRateAPIFn = (...args: any[]) => Promise<\r\n  | {\r\n      conversionRates: T_ConversionRates;\r\n    }\r\n  | undefined\r\n  | null\r\n>;\r\n\r\nexport type T_UnitConverterPropsDefaults = {\r\n  inputCode: string;\r\n  targetCode: string;\r\n  favoriteCodes: T_FavoriteCodes;\r\n};\r\n\r\nexport type T_UnitConverterConversionLogicProps = {\r\n  conversionRates?: T_ConversionRates;\r\n  conversionFormulas?: T_ConversionFormulas;\r\n};\r\n\r\nexport type T_UnitConverterProps = {\r\n  allUnitsMap: T_UnitConversionAllUnitsMap;\r\n  defaults: T_UnitConverterPropsDefaults;\r\n  UnitIconComponent?: React.ComponentType<{\r\n    code: string;\r\n    wrapperClassName?: string;\r\n    iconClassName?: string;\r\n  }>;\r\n} & T_UnitConverterConversionLogicProps;\r\n\r\nexport type T_FavoriteItemWithValue = {\r\n  code: string;\r\n  value: T_StringOrNumber;\r\n};\r\n\r\nexport type T_FavoriteCodes = string[];\r\n\r\nexport type T_FavoritesWithValue = T_FavoriteItemWithValue[];\r\n\r\nexport type T_ConversionRates = T_Object<number>;\r\n\r\nexport type T_UnitConverterAction = [\r\n  type: E_UnitConverterActions,\r\n  payload?: any\r\n];\r\n\r\nexport type T_UnitConverterState = {\r\n  inputCode: string;\r\n  targetCode: string;\r\n  favorites: T_FavoritesWithValue;\r\n  inputValue: string | number;\r\n  targetValue: string | number;\r\n};\r\n","export function toNumber(x: any) {\r\n  return +x;\r\n}\r\n\r\nexport function round(num: number | string, fractionDigits: number = 2) {\r\n  return toNumber(toNumber(num).toFixed(fractionDigits));\r\n}\r\n","import { LocalStorage } from \"shared/helpers/webStorage\";\r\n\r\nexport default class PageCache {\r\n  keyPrefix: string;\r\n  cachedKeys: string[] = [];\r\n\r\n  constructor(pathname: string) {\r\n    this.keyPrefix = pathname;\r\n  }\r\n\r\n  private getPageKey(key: string) {\r\n    return `${this.keyPrefix}-${key}`;\r\n  }\r\n\r\n  public set = (key: string, data: any = null): void => {\r\n    const pageKey = this.getPageKey(key);\r\n    LocalStorage.setItem(pageKey, JSON.stringify(data));\r\n    this.cachedKeys.push(key);\r\n  };\r\n\r\n  public get = <Result>(key: string): Result | null => {\r\n    const pageKey = this.getPageKey(key);\r\n    return JSON.parse(LocalStorage.getItem(pageKey) ?? \"null\");\r\n  };\r\n\r\n  public remove = (key: string): void => {\r\n    const pageKey = this.getPageKey(key);\r\n    LocalStorage.removeItem(pageKey);\r\n    this.cachedKeys = this.cachedKeys.filter((k) => k !== key);\r\n  };\r\n\r\n  public clearAll = () => {\r\n    this.cachedKeys.forEach((key) => this.remove(key));\r\n    this.cachedKeys = [];\r\n  };\r\n}\r\n","export function isStorageSupported(type: string): boolean {\r\n  try {\r\n    const storage = (window as { [key: string]: any })[type];\r\n    const testKey = \"__storage_test__\";\r\n\r\n    storage.setItem(testKey, \"1\");\r\n    storage.removeItem(testKey);\r\n\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Wrapper class for storage\r\nexport class MemoryStorage {\r\n  public storage: { [x: string]: string } = {};\r\n\r\n  public setItem = (key: string, data: string): void => {\r\n    const json = (data && data.toString()) || \"\";\r\n\r\n    this.storage[key] = json;\r\n  };\r\n\r\n  public getItem = (key: string): string | null => this.storage[key] || \"\";\r\n\r\n  public removeItem = (key: string): void => {\r\n    delete this.storage[key];\r\n  };\r\n\r\n  public clear = () => {\r\n    this.storage = new MemoryStorage().storage;\r\n  };\r\n}\r\n\r\nexport const LocalStorage = isStorageSupported(\"localStorage\")\r\n  ? window.localStorage\r\n  : new MemoryStorage();\r\n\r\nexport const SessionStorage = isStorageSupported(\"sessionStorage\")\r\n  ? window.sessionStorage\r\n  : new MemoryStorage();\r\n"],"names":["sanitizeNumericInput","value","replace","getDefaultFavorites","favoriteCodes","map","code","calcValueForFavorites","_ref","favorites","conversionRates","conversionFormulas","inputCode","inputValue","favItem","calcValue","targetCode","_ref2","_ref4","targetValue","baseUnitCode","fromBaseTo","toBaseFrom","calcValueBasedOnFormula","_ref3","x","toNumber","n1","n2","round","calcValueBasedOnRatio","useElementHandlers","dispatch","pageCache","inputValueEl","useRef","targetValueEl","eventHandlers","useMemo","handleInputValueChange","event","E_UnitConverterActions","setInputValue","target","handleTargetValueChange","setTargetValue","handleListItemAction","actionName","currentTarget","dataset","E_UnitConverterListItemActions","input","_inputValueEl$current","set","E_PageCacheKeys","setInputCode","current","focus","_targetValueEl$curren","setTargetCode","handleInputClearClick","_inputValueEl$current3","handleTargetClearClick","_targetValueEl$curren2","handleInputTargetCodeSwapClick","_inputValueEl$current2","swapInputTargetCode","useDefaults","defaults","location","useLocation","PageCache","pathname","get","createReducer","props","state","type","payload","conversionLogicProps","newInputValue","sanitizedInputValue","sanitizedTargetValue","toggleFavorite","favoritesArrWithoutPayloadItem","filter","length","num","fractionDigits","arguments","undefined","toFixed","constructor","_this","keyPrefix","cachedKeys","key","data","pageKey","getPageKey","LocalStorage","setItem","JSON","stringify","push","_LocalStorage$getItem","this","parse","getItem","remove","removeItem","k","clearAll","forEach","isStorageSupported","storage","window","testKey","error","MemoryStorage","json","toString","clear","localStorage","SessionStorage","sessionStorage"],"sourceRoot":""}