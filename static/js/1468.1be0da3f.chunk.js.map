{"version":3,"file":"static/js/1468.1be0da3f.chunk.js","mappings":"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","sources":["pages/tools/money/forex/api.ts","pages/tools/money/forex/constants.ts","pages/tools/money/forex/helpers.ts","pages/tools/money/forex/index.tsx","shared/components/countryFlag/index.tsx","shared/helpers/request.ts","shared/helpers/time.ts","webpack://mysite-dev/./src/shared/components/countryFlag/styles.scss?2486"],"sourcesContent":["import appConstants from \"shared/constants/app\";\nimport { getTimestamp } from \"shared/helpers/time\";\nimport { LocalStorage } from \"shared/helpers/webStorage\";\nimport request, { T_HTTPMethod } from \"shared/helpers/request\";\nimport {\n  mapForexRateResponse,\n  T_ForexData,\n  T_ForexResponse\n} from \"./helpers\";\n\nexport async function fetchForexData() {\n  let result: T_ForexData | null = JSON.parse(\n    LocalStorage.getItem(appConstants.webStorage.forexData) ?? \"null\"\n  );\n\n  // Make the API call only when necessary\n  if (\n    !result || // if there is no cached data yet\n    getTimestamp() > result.timeNextUpdate // // OR if cached data is expired\n  ) {\n    const response = await request<T_ForexResponse>({\n      method: T_HTTPMethod.GET,\n      endpoint: appConstants.API.forex\n    });\n    if (response.result) {\n      result = mapForexRateResponse(response.result);\n      // Update cache with latest data\n      LocalStorage.setItem(\n        appConstants.webStorage.forexData,\n        JSON.stringify(result)\n      );\n    }\n  }\n\n  return result?.conversionRates;\n}\n","import { T_UnitConversionAllUnitsMap } from \"shared/types/unitConverter\";\n\n/**\n *    {\n *        <currency-code>: {\n *            name: <currency-name>,\n *            symbol: <recognized-currency-symbol>,\n *            altCode: <alpha 2 ISO 3166 country code>\n *        }\n *    }\n *\n * @see https://www.iban.com/currency-codes\n * @see https://www.iban.com/country-codes\n */\nconst unitsMap: T_UnitConversionAllUnitsMap = {\n  INR: {\n    name: \"Indian Rupee\",\n    symbol: \"₹\",\n    altCode: \"IN\"\n  },\n  VND: {\n    name: \"Vietnamese đồng\",\n    symbol: \"₫\",\n    altCode: \"VN\"\n  },\n  NZD: {\n    name: \"New Zealand Dollar\",\n    symbol: \"$\",\n    altCode: \"NZ\"\n  },\n  THB: {\n    name: \"Thai Baht\",\n    symbol: \"฿\",\n    altCode: \"TH\"\n  },\n  USD: {\n    name: \"US Dollar\",\n    symbol: \"$\",\n    altCode: \"US\"\n  },\n  EUR: {\n    name: \"Euro\",\n    symbol: \"€\",\n    altCode: \"EU\"\n  },\n  AED: {\n    name: \"UAE Dirham\",\n    symbol: \"د.إ\",\n    altCode: \"AE\"\n  },\n  QAR: {\n    name: \"Qatari Riyal\",\n    symbol: \"ر.ق\",\n    altCode: \"QA\"\n  },\n  JPY: {\n    name: \"Japanese Yen\",\n    symbol: \"¥\",\n    altCode: \"JP\"\n  },\n  GBP: {\n    name: \"Great British Pound\",\n    symbol: \"£\",\n    altCode: \"GB\"\n  },\n  RUB: {\n    name: \"Russian Ruble\",\n    symbol: \"₽\",\n    altCode: \"RU\"\n  },\n  CNY: {\n    name: \"Chinese Yuan\",\n    symbol: \"元\",\n    altCode: \"CN\"\n  },\n  AUD: {\n    name: \"Australian Dollar\",\n    symbol: \"$\",\n    altCode: \"AU\"\n  },\n  CAD: {\n    name: \"Canadian Dollar\",\n    symbol: \"$\",\n    altCode: \"CA\"\n  },\n  LAK: {\n    name: \"Lao Kip\",\n    symbol: \"₭N\",\n    altCode: \"LA\"\n  },\n  IDR: {\n    name: \"Indonesian Rupiah\",\n    symbol: \"Rp\",\n    altCode: \"ID\"\n  }\n  // : {\n  //   name: \"\",\n  //   symbol: \"¤\",\n  //   altCode: \"\"\n  // }\n};\n\nconst defaults = {\n  inputCode: \"INR\",\n  targetCode: \"USD\",\n  favoriteCodes: Object.keys(unitsMap)\n};\n\nconst forexConstants = {\n  unitsMap,\n  defaults\n}\n\nexport default forexConstants;\n","import { T_ConversionRates } from \"shared/components/unitConverter/types\";\n\nexport function mapForexRateResponse(response: T_ForexResponse) {\n  return {\n    baseCode: response.base_code,\n    conversionRates: response.conversion_rates,\n    timeLastUpdate: response.time_last_update_unix,\n    timeNextUpdate: response.time_next_update_unix\n  };\n}\n\n/**\n * Types\n */\nexport interface T_ForexResponse {\n  conversion_rates: T_ConversionRates;\n  base_code: string;\n  time_last_update_unix: number;\n  time_last_update_utc: string;\n  time_next_update_unix: number;\n  time_next_update_utc: string;\n}\n\nexport type T_ForexData = ReturnType<typeof mapForexRateResponse>;\n","import React, { useEffect, useState } from \"react\";\n\nimport UnitConverter from \"shared/components/unitConverter\";\nimport forexConstants from \"./constants\";\nimport { fetchForexData } from \"./api\";\nimport CountryFlag from \"shared/components/countryFlag\";\n\nfunction Forex() {\n  const [conversionRates, setState] =\n    useState<Awaited<ReturnType<typeof fetchForexData>>>();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let result = await fetchForexData();\n\n      if (result) {\n        setState(result);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // TODO:loading indicator / animate-pulse empty content placholders\n  if (!conversionRates) {\n    return null;\n  }\n\n  return (\n    <UnitConverter\n      allUnitsMap={forexConstants.unitsMap}\n      conversionRates={conversionRates}\n      defaults={forexConstants.defaults}\n      UnitIconComponent={CountryFlag}\n    />\n  );\n}\n\nexport default Forex;\n","import React from \"react\";\n\nimport \"./styles.scss\";\n\nexport default function CountryFlag({\n  code,\n  iconClassName = \"\",\n  wrapperClassName = \"\"\n}: T_CountryFlagProp) {\n  return (\n    <span className={wrapperClassName}>\n      <i\n        className={`countryFlagSprite countryFlag-${code.toLowerCase()} ${iconClassName}`}\n      ></i>\n    </span>\n  );\n}\n\nexport type T_CountryFlagProp = {\n  code: string;\n  wrapperClassName?: string;\n  iconClassName?: string;\n};\n","export const enum T_HTTPMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  PATCH = \"PATCH\",\n  DELETE = \"DELETE\"\n}\n\ninterface T_RequestOptions {\n  method: T_HTTPMethod;\n  endpoint: string;\n  params?: { [key: string]: any };\n  headers?: HeadersInit;\n  body?: any;\n  rawBody?: BodyInit | null;\n}\n\nexport const getQueryParams = (params: { [key: string]: string }): string =>\n  Object.keys(params)\n    .filter(\n      (k) =>\n        typeof params[k] !== \"undefined\" &&\n        params[k] !== null &&\n        params[k] !== \"\"\n    ) // removes if empty, but accepts \"0\"\n    .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n    .join(\"&\");\n\nexport default async function request<T>({\n  method,\n  endpoint,\n  params,\n  headers,\n  body,\n  rawBody\n}: T_RequestOptions): Promise<{\n  result?: T;\n  error?: unknown;\n}> {\n  let url = endpoint;\n  if (params) {\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + getQueryParams(params);\n  }\n\n  const fetchOptions: RequestInit = {\n    headers,\n    method,\n    credentials: \"same-origin\",\n    mode: \"cors\"\n  };\n  if (method !== T_HTTPMethod.GET && (rawBody || body)) {\n    fetchOptions.body = rawBody || JSON.stringify(body);\n  }\n\n  try {\n    const response = await fetch(url, fetchOptions);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    let result: T;\n\n    if (contentType.includes(\"application/json\")) {\n      result = await response.json();\n    } else {\n      result = response as unknown as T;\n    }\n\n    if (response.status >= 400) {\n      throw result || (await response.text());\n    }\n\n    return { result };\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : error };\n  }\n}\n","export function getTimestamp() {\n  return Math.floor(+Date.now() / 1000);\n}\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["fetchForexData","result","JSON","parse","LocalStorage","appConstants","getTimestamp","timeNextUpdate","request","method","T_HTTPMethod","endpoint","response","mapForexRateResponse","stringify","conversionRates","unitsMap","INR","name","symbol","altCode","VND","NZD","THB","USD","EUR","AED","QAR","JPY","GBP","RUB","CNY","AUD","CAD","LAK","IDR","forexConstants","defaults","inputCode","targetCode","favoriteCodes","Object","keys","baseCode","base_code","conversion_rates","timeLastUpdate","time_last_update_unix","time_next_update_unix","useState","setState","useEffect","fetchData","allUnitsMap","UnitIconComponent","CountryFlag","code","iconClassName","wrapperClassName","className","toLowerCase","getQueryParams","params","filter","k","map","encodeURIComponent","join","headers","body","rawBody","url","indexOf","fetchOptions","credentials","mode","GET","fetch","get","includes","json","status","text","error","Error","message","Math","floor","Date","now"],"sourceRoot":""}