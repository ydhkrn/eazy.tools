{"version":3,"file":"static/js/9204.2c0a3e06.chunk.js","mappings":"0TASO,SAASA,EAAqBC,GACnC,OACEA,EAEGC,QAAQ,WAAY,IAEpBA,QAAQ,eAAgB,MAGxBA,QAAQ,SAAU,MAElBA,QAAQ,SAAU,KAEzB,CAEO,SAASC,EACdC,GAEA,OAAOA,EAAcC,KAAI,SAACC,GAAI,MAAM,CAAEA,KAAAA,EAAML,MAAO,GAAI,GACzD,CAEO,SAASM,EAAsB,GAMqB,IALzDC,EAAS,EAATA,UACAC,EAAe,EAAfA,gBACAC,EAAkB,EAAlBA,mBACAC,EAAS,EAATA,UACAC,EAAU,EAAVA,WAEA,OAAOJ,EAAUH,KAAI,SAACQ,GAAO,yBACxBA,GAAO,IACVZ,MAAOa,EAAU,CACfL,gBAAAA,EACAC,mBAAAA,EACAC,UAAAA,EACAI,WAAYF,EAAQP,KACpBM,WAAAA,KACA,GAEN,CAEO,SAASE,EAAU,GAMiB,IALzCL,EAAe,EAAfA,gBACAC,EAAkB,EAAlBA,mBACAC,EAAS,EAATA,UACAI,EAAU,EAAVA,WACAH,EAAU,EAAVA,WAEA,OAAIF,EAiDN,SAAiC,GAKuC,IAJtEA,EAAkB,EAAlBA,mBACAC,EAAS,EAATA,UACAI,EAAU,EAAVA,WACAH,EAAU,EAAVA,WAEII,EAAgC,EAEpC,GAAIL,IAAcD,EAAmBO,aACnC,OAAOP,EAAmBQ,WAAWH,GAAYH,GAKnD,OAFAI,EAAcN,EAAmBS,WAAWR,GAAWC,GAEnDG,IAAeL,EAAmBO,aAC7BD,EAEAN,EAAmBQ,WAAWH,GAAYC,EAErD,CAnEWI,CAAwB,CAC7BV,mBAAAA,EACAC,UAAAA,EACAI,WAAAA,EACAH,WAAAA,IAEOH,EA6Bb,SAA+B,GAKmC,IAJhEA,EAAe,EAAfA,gBACAE,EAAS,EAATA,UACAI,EAAU,EAAVA,WACAH,EAAU,EAAVA,WAEMS,GAAIC,EAAAA,EAAAA,UAASV,GACbW,EAAKd,EAAgBE,GACrBa,EAAKf,EAAgBM,GAE3B,OAAOU,EAAAA,EAAAA,OAAOD,EAAKH,EAAKE,EAC1B,CAvCWG,CAAsB,CAC3BjB,gBAAAA,EACAE,UAAAA,EACAI,WAAAA,EACAH,WAAAA,IAGKA,CAEX,C,wBCzEO,SAASU,EAASD,GACvB,OAAQA,CACV,CAEO,SAASI,EAAME,GAAmD,IAA7BC,EAAsB,uDAAG,EACnE,OAAON,EAASA,EAASK,GAAKE,QAAQD,GACxC,C","sources":["shared/components/unitConverter/helpers.ts","shared/helpers/number.ts"],"sourcesContent":["import {\n  T_ConversionRates,\n  T_FavoriteCodes,\n  T_FavoritesWithValue\n} from \"shared/components/unitConverter/types\";\nimport { round, toNumber } from \"shared/helpers/number\";\nimport { T_StringOrNumber } from \"shared/types/common\";\nimport { T_ConversionFormulas } from \"shared/types/unitConverter\";\n\nexport function sanitizeNumericInput(value: string) {\n  return (\n    value\n      // allow only numbers (with/without decimal values)\n      .replace(/[^0-9.]/g, \"\")\n      // allow only one decimal\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      // add a leading zero if the input is just a decimal point\n      // this will help 'toNumber' method to cast \"0.\" to 0\n      .replace(/^(\\.)$/, \"0.\")\n      // allow leading zero only for decimal values\n      .replace(/^0(\\d)/, \"$1\")\n  );\n}\n\nexport function getDefaultFavorites(\n  favoriteCodes: T_FavoriteCodes\n): T_FavoritesWithValue {\n  return favoriteCodes.map((code) => ({ code, value: \"\" }));\n}\n\nexport function calcValueForFavorites({\n  favorites,\n  conversionRates,\n  conversionFormulas,\n  inputCode,\n  inputValue\n}: T_CalcValueForFavoritesFnParams): T_FavoritesWithValue {\n  return favorites.map((favItem) => ({\n    ...favItem,\n    value: calcValue({\n      conversionRates,\n      conversionFormulas,\n      inputCode,\n      targetCode: favItem.code,\n      inputValue\n    })\n  }));\n}\n\nexport function calcValue({\n  conversionRates,\n  conversionFormulas,\n  inputCode,\n  targetCode,\n  inputValue\n}: T_CalcValueFnParams): T_StringOrNumber {\n  if (conversionFormulas) {\n    return calcValueBasedOnFormula({\n      conversionFormulas,\n      inputCode,\n      targetCode,\n      inputValue\n    });\n  } else if (conversionRates) {\n    return calcValueBasedOnRatio({\n      conversionRates,\n      inputCode,\n      targetCode,\n      inputValue\n    });\n  } else {\n    return inputValue;\n  }\n}\n\n/**\n * Assume:\n *    base code (of master data): BBB\n *    input code: CCC\n *    input value: x\n *    target code: YYY\n *\n * and we know (from master data):\n *    1 BBB = n1 CCC\n *    1 BBB = n2 YYY\n *\n * then,\n *               1 CCC  =  (1 / n1) BBB\n *               x CCC  =  x * (1 / n1) BBB\n *    x * (1 / n1) BBB  =  n2 * x * (1 / n1) YYY\n *               x CCC  =  n2 * x * / n1 YYY\n */\nfunction calcValueBasedOnRatio({\n  conversionRates,\n  inputCode,\n  targetCode,\n  inputValue\n}: { conversionRates: T_ConversionRates } & T_CalcValueFnParams) {\n  const x = toNumber(inputValue);\n  const n1 = conversionRates[inputCode];\n  const n2 = conversionRates[targetCode];\n\n  return round((n2 * x) / n1);\n}\n\nfunction calcValueBasedOnFormula({\n  conversionFormulas,\n  inputCode,\n  targetCode,\n  inputValue\n}: { conversionFormulas: T_ConversionFormulas } & T_CalcValueFnParams) {\n  let targetValue: T_StringOrNumber = 0;\n\n  if (inputCode === conversionFormulas.baseUnitCode) {\n    return conversionFormulas.fromBaseTo[targetCode](inputValue);\n  }\n\n  targetValue = conversionFormulas.toBaseFrom[inputCode](inputValue);\n\n  if (targetCode === conversionFormulas.baseUnitCode) {\n    return targetValue;\n  } else {\n    return conversionFormulas.fromBaseTo[targetCode](targetValue);\n  }\n}\n\ntype T_CalcValueForFavoritesFnParams = Omit<\n  T_CalcValueFnParams,\n  \"targetCode\"\n> & {\n  favorites: T_FavoritesWithValue;\n};\n\ntype T_CalcValueFnParams = {\n  inputCode: string;\n  targetCode: string;\n  inputValue: T_StringOrNumber;\n  conversionRates?: T_ConversionRates;\n  conversionFormulas?: T_ConversionFormulas;\n};\n","export function toNumber(x: any) {\n  return +x;\n}\n\nexport function round(num: number | string, fractionDigits: number = 2) {\n  return toNumber(toNumber(num).toFixed(fractionDigits));\n}\n"],"names":["sanitizeNumericInput","value","replace","getDefaultFavorites","favoriteCodes","map","code","calcValueForFavorites","favorites","conversionRates","conversionFormulas","inputCode","inputValue","favItem","calcValue","targetCode","targetValue","baseUnitCode","fromBaseTo","toBaseFrom","calcValueBasedOnFormula","x","toNumber","n1","n2","round","calcValueBasedOnRatio","num","fractionDigits","toFixed"],"sourceRoot":""}