{"version":3,"file":"static/js/5253.31a9114f.chunk.js","mappings":"0IAIMA,EAAwC,CAC5CC,EAAG,CACDC,KAAM,SACNC,OAAQ,KAEVC,EAAG,CACDF,KAAM,UACNC,OAAQ,SAEVE,EAAG,CACDH,KAAM,aACNC,OAAQ,SAEVG,EAAG,CACDJ,KAAM,UACNC,OAAQ,UAiCNI,EAA2C,CAC/CC,aAFe,IAGfC,WAAY,CACVR,EAAG,SAACA,GAAS,OAAKS,EAAAA,EAAAA,UAAST,EAAE,EAC7BG,EAAG,SAACH,GAAS,OAAKU,EAAAA,EAAAA,QAAMD,EAAAA,EAAAA,UAAST,GAAK,OAAO,EAC7CI,EAAG,SAACJ,GAAS,OAAKU,EAAAA,EAAAA,OAAgC,IAAxBD,EAAAA,EAAAA,UAAST,GAAK,QAAe,GAAK,EAAE,EAC9DK,EAAG,SAACL,GAAS,OAAKU,EAAAA,EAAAA,OAAqB,GAAdD,EAAAA,EAAAA,UAAST,GAAU,EAAE,GAEhDW,WAAY,CACVX,EAAG,SAACA,GAAS,OAAKS,EAAAA,EAAAA,UAAST,EAAE,EAC7BG,EAAG,SAACA,GAAU,OAAKO,EAAAA,EAAAA,QAAMD,EAAAA,EAAAA,UAASN,GAAK,OAAO,EAC9CC,EAAG,SAACA,GAAa,OAAKM,EAAAA,EAAAA,OAA4B,IAApBD,EAAAA,EAAAA,UAASL,GAAK,IAAW,GAAK,MAAM,EAClEC,EAAG,SAACA,GAAS,OAAKK,EAAAA,EAAAA,OAAqB,GAAdD,EAAAA,EAAAA,UAASJ,GAAU,EAAE,IAU5CO,EAAuB,CAC3Bb,SAAAA,EACAc,SAzBe,IA0BfC,SATe,CACfC,UAAW,IACXC,WAAY,IACZC,cAAeC,OAAOC,KAAKpB,IAO3BO,mBAAAA,GAGF,W,4EClEA,UAVA,WACE,OACE,SAAC,UAAa,CACZc,YAAaR,EAAAA,QAAAA,SACbE,SAAUF,EAAAA,QAAAA,SACVN,mBAAoBM,EAAAA,QAAAA,oBAG1B,C","sources":["pages/tools/convert/temp/constants.ts","pages/tools/convert/temp/index.tsx"],"sourcesContent":["import { T_ConversionFormulas, T_UnitConversionAllUnitsMap } from \"shared/types/unitConverter\";\nimport { T_FavoriteCodes } from \"shared/components/unitConverter/types\";\nimport { toNumber, round } from \"shared/helpers/number\";\n\nconst unitsMap: T_UnitConversionAllUnitsMap = {\n  K: {\n    name: \"Kelvin\",\n    symbol: \"K\"\n  },\n  C: {\n    name: \"Celsius\",\n    symbol: \"°C\"\n  },\n  F: {\n    name: \"Fahrenheit\",\n    symbol: \"°F\"\n  },\n  R: {\n    name: \"Rankine\",\n    symbol: \"°R\"\n  }\n  // RO: {\n  //   name: \"Rømer\",\n  //   symbol: \"°Rø\"\n  // },\n  // RE: {\n  //   name: \"Réaumur\",\n  //   symbol: \"°Ré\"\n  // },\n  // N: {\n  //   name: \"Newton\",\n  //   symbol: \"°N\"\n  // },\n  // D: {\n  //   name: \"Delisle\",\n  //   symbol: \"°D\"\n  // },\n  // L: {\n  //   name: \"Leiden\",\n  //   symbol: \"°L\"\n  // },\n  // W: {\n  //   name: \"Wedgwood\",\n  //   symbol: \"°W\"\n  // }\n};\n\ntype Kelvin = number;\ntype Fahrenheit = number;\ntype Celcius = number;\n\nconst baseUnit = \"K\";\nconst conversionFormulas: T_ConversionFormulas = {\n  baseUnitCode: baseUnit,\n  fromBaseTo: {\n    K: (K: Kelvin) => toNumber(K),\n    C: (K: Kelvin) => round(toNumber(K) - 273.15),\n    F: (K: Kelvin) => round(((toNumber(K) - 273.15) * 9) / 5) + 32,\n    R: (K: Kelvin) => round((toNumber(K) * 9) / 5)\n  },\n  toBaseFrom: {\n    K: (K: Kelvin) => toNumber(K),\n    C: (C: Celcius) => round(toNumber(C) + 273.15),\n    F: (F: Fahrenheit) => round(((toNumber(F) - 32) * 5) / 9) + 273.15,\n    R: (R: Kelvin) => round((toNumber(R) * 5) / 9)\n  }\n};\n\nconst defaults = {\n  inputCode: \"C\",\n  targetCode: \"F\",\n  favoriteCodes: Object.keys(unitsMap) as T_FavoriteCodes\n};\n\nconst temperatureConstants = {\n  unitsMap,\n  baseUnit,\n  defaults,\n  conversionFormulas\n}\n\nexport default temperatureConstants;\n","import React from \"react\";\n\nimport UnitConverter from \"shared/components/unitConverter\";\nimport temperatureConstants from \"./constants\";\n\nfunction Temperature() {\n  return (\n    <UnitConverter\n      allUnitsMap={temperatureConstants.unitsMap}\n      defaults={temperatureConstants.defaults}\n      conversionFormulas={temperatureConstants.conversionFormulas}\n    />\n  );\n}\n\nexport default Temperature;\n"],"names":["unitsMap","K","name","symbol","C","F","R","conversionFormulas","baseUnitCode","fromBaseTo","toNumber","round","toBaseFrom","temperatureConstants","baseUnit","defaults","inputCode","targetCode","favoriteCodes","Object","keys","allUnitsMap"],"sourceRoot":""}