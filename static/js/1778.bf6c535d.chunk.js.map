{"version":3,"file":"static/js/1778.bf6c535d.chunk.js","mappings":"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","sources":["pages/tools/time/timezone/constants.ts","pages/tools/time/timezone/helpers.ts","pages/tools/time/timezone/hooks.ts","pages/tools/time/timezone/index.tsx","pages/tools/time/timezone/types.ts","shared/helpers/number.ts","shared/helpers/timeZone/index.ts","webpack://eazy.tools-dev/./src/pages/tools/time/timezone/styles.scss?9f31"],"sourcesContent":["const degreePerClockMark = 60;\r\nconst clockMarkCount = 24;\r\nconst clockMarkDegreeFrom = 0;\r\nconst clockMarkDegreeTo = degreePerClockMark * clockMarkCount;\r\nconst clockTimeDelimiter = \":\";\r\n\r\n/**\r\n * Styles\r\n */\r\nconst handleCommonStyle = {\r\n  borderTopRightRadius: \"20%\",\r\n  borderTopLeftRadius: \"20%\",\r\n  borderBottomRightRadius: \"100%\",\r\n  borderBottomLeftRadius: \"100%\",\r\n  borderWidth: 3,\r\n  height: 25,\r\n  width: 13,\r\n  marginTop: -16\r\n};\r\nconst dotTrackRailHeight = 20;\r\nconst sliderStyleProps = {\r\n  handleStyle: [\r\n    {\r\n      ...handleCommonStyle,\r\n      borderColor: \"#01527E\",\r\n      backgroundColor: \"#3FBF3F\"\r\n    },\r\n    {\r\n      ...handleCommonStyle,\r\n      borderColor: \"#01527E\",\r\n      backgroundColor: \"#FE473E\"\r\n    }\r\n  ],\r\n  dotStyle: {\r\n    height: dotTrackRailHeight,\r\n    width: 1,\r\n    borderRadius: 0,\r\n    borderColor: \"#ddd\"\r\n  },\r\n  trackStyle: {\r\n    marginTop: -14,\r\n    height: dotTrackRailHeight,\r\n    borderRadius: 0,\r\n    backgroundColor: \"#58B5FD\"\r\n  },\r\n  railStyle: {\r\n    borderRadius: 0,\r\n    marginTop: -14,\r\n    height: dotTrackRailHeight,\r\n    backgroundColor: \"#eee\"\r\n  }\r\n};\r\n\r\nconst toolsTimeTimeZoneConstants = {\r\n  degreePerClockMark,\r\n  clockMarkCount,\r\n  clockTimeDelimiter,\r\n  clockMarkDegreeRange: {\r\n    min: clockMarkDegreeFrom,\r\n    max: clockMarkDegreeTo\r\n  },\r\n  sliderStyleProps\r\n} as const;\r\n\r\nexport default toolsTimeTimeZoneConstants;\r\n","import { DateTime } from \"luxon\";\r\nimport { SliderProps } from \"rc-slider\";\r\nimport { MarkObj } from \"rc-slider/lib/Marks\";\r\nimport windowConstants from \"shared/constants/window\";\r\n\r\nimport { toNumber } from \"shared/helpers/number\";\r\nimport { getClocksDataOfLocalAndOtherTimeZones, localTimeZoneName } from \"shared/helpers/timeZone\";\r\nimport { T_Nullable } from \"shared/types/generics\";\r\nimport { T_Breakpoint } from \"shared/types/window\";\r\nimport toolsTimeTimeZoneConstants from \"./constants\";\r\nimport {\r\n  T_Degree,\r\n  T_Time24HrsFormat,\r\n  T_TimeForDisplay,\r\n  E_Meridiem,\r\n  T_HourOrMinute,\r\n  T_TimeRangeSelectorState,\r\n  T_TimeRangeSelectorAction,\r\n  E_TimeRangeSelectorActions,\r\n  E_TimeRangeSelectorTimeZoneListItemActions\r\n} from \"./types\";\r\n\r\nexport function get12HourValue(value: T_HourOrMinute) {\r\n  const twelveHourValue = value % 12;\r\n  return twelveHourValue ? twelveHourValue : 12; // the hour '0' should be '12'\r\n}\r\n\r\nexport function getMeridiemFrom24HourValue(value: number) {\r\n  return value >= 12 ? E_Meridiem.PM : E_Meridiem.AM\r\n}\r\n\r\nexport function get24HourValue(\r\n  value: string,\r\n  meridiem?: T_Nullable<E_Meridiem>\r\n) {\r\n  const numericValue = toNumber(value);\r\n\r\n  if (meridiem) {\r\n    if (meridiem === E_Meridiem.PM) {\r\n      if (numericValue < 12) {\r\n        return numericValue + 12;\r\n      }\r\n    } else if (numericValue === 12) {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  return numericValue ?? 0;\r\n}\r\n\r\nfunction getTimeForDisplay(\r\n  time: T_Time24HrsFormat,\r\n  isTarget24HourFormat: boolean\r\n): T_TimeForDisplay {\r\n  let { hour, minute } = time;\r\n  let meridiem = null;\r\n\r\n  if (!isTarget24HourFormat) {\r\n    meridiem = (hour >= 12 && hour !== 24) ? E_Meridiem.PM : E_Meridiem.AM;\r\n    hour = get12HourValue(hour);\r\n  }\r\n\r\n  return {\r\n    hour: String(hour).padStart(2, \"0\"),\r\n    minute: String(minute).padStart(2, \"0\"),\r\n    meridiem\r\n  };\r\n}\r\n\r\nexport function getTimeFromDegreeForDisplay(\r\n  degree: T_Degree,\r\n  isTarget24HourFormat: boolean\r\n): T_TimeForDisplay {\r\n  let hour = 0;\r\n  let minute = 0;\r\n\r\n  if (degree !== 0) {\r\n    minute = degree % toolsTimeTimeZoneConstants.degreePerClockMark;\r\n    hour = (degree - minute) / toolsTimeTimeZoneConstants.degreePerClockMark;\r\n  }\r\n\r\n  return getTimeForDisplay({ hour, minute }, isTarget24HourFormat);\r\n}\r\n\r\nexport function getDegreeFromTime(time: T_TimeForDisplay) {\r\n  const hourIn24HourFormat = get24HourValue(time.hour, time.meridiem);\r\n\r\n  return (\r\n    hourIn24HourFormat * toolsTimeTimeZoneConstants.degreePerClockMark +\r\n    toNumber(time.minute)\r\n  );\r\n}\r\n\r\nexport function getClockMarksResponsive(\r\n  isTarget24HourFormat: boolean,\r\n  activeBreakpoint?: T_Breakpoint\r\n) {\r\n  const clockMarks: SliderProps[\"marks\"] = {};\r\n\r\n  for (\r\n    let index = 0;\r\n    index <= toolsTimeTimeZoneConstants.clockMarkCount;\r\n    index++\r\n  ) {\r\n    const key = index * toolsTimeTimeZoneConstants.degreePerClockMark;\r\n    const label = isTarget24HourFormat ? index : get12HourValue(index);\r\n    let value: React.ReactNode | MarkObj;\r\n\r\n    switch (activeBreakpoint?.name) {\r\n      case windowConstants.breakpoints.none.name: {\r\n        value = {\r\n          style: {\r\n            fontSize: 8,\r\n            marginTop: -3\r\n          },\r\n          label\r\n        };\r\n        break; \r\n      }\r\n      case windowConstants.breakpoints.small.name:\r\n      case windowConstants.breakpoints.medium.name: {\r\n        value = {\r\n          style: {\r\n            fontSize: 10,\r\n            marginTop: -2\r\n          },\r\n          label\r\n        };\r\n        break; \r\n      }\r\n      default: {\r\n        value = label\r\n      }\r\n    }\r\n\r\n    clockMarks[key] = value;\r\n  }\r\n\r\n  return clockMarks;\r\n}\r\n\r\nexport function getSliderStylePropsResponsive(sliderProps: SliderProps, activeBreakpoint?: T_Breakpoint) {\r\n  let newSliderProps = { ...sliderProps } as SliderProps;\r\n  let handleStyle;\r\n  let dotStyle;\r\n  let trackStyle;\r\n  let railStyle;\r\n\r\n  switch (activeBreakpoint?.name) {\r\n    case windowConstants.breakpoints.none.name: {\r\n      const dotTrackRailHeight = 20;\r\n      handleStyle = {\r\n        borderWidth: 2,\r\n        width: 10\r\n      };\r\n      dotStyle = {\r\n        height: dotTrackRailHeight,\r\n        borderWidth: 1\r\n      }\r\n      trackStyle = {\r\n        height: dotTrackRailHeight\r\n      }\r\n      railStyle = {\r\n        height: dotTrackRailHeight\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(sliderProps.handleStyle) && handleStyle) {\r\n    newSliderProps.handleStyle = [\r\n      { ...sliderProps.handleStyle[0], ...handleStyle },\r\n      { ...sliderProps.handleStyle[1], ...handleStyle }\r\n    ];\r\n  }\r\n  if (sliderProps.dotStyle && dotStyle) {\r\n    newSliderProps.dotStyle = { ...sliderProps.dotStyle, ...dotStyle };\r\n  }\r\n  if (sliderProps.trackStyle && trackStyle) {\r\n    newSliderProps.trackStyle = { ...sliderProps.trackStyle, ...trackStyle };\r\n  }\r\n  if (sliderProps.railStyle && railStyle) {\r\n    newSliderProps.railStyle = { ...sliderProps.railStyle, ...railStyle };\r\n  }\r\n\r\n  return newSliderProps;\r\n}\r\n\r\nexport function convertDegreeValuesToTimeValuesForDisplay(\r\n  degreeValues: T_Degree[],\r\n  isTarget24HourFormat: boolean\r\n) {\r\n  return degreeValues.map((value) =>\r\n    getTimeFromDegreeForDisplay(value, isTarget24HourFormat)\r\n  );\r\n}\r\n\r\nexport function convertDateTimeValuesToDegreeValues(\r\n  dateTimeValues: DateTime[]\r\n) {\r\n  return dateTimeValues.map((value) =>\r\n    getDegreeFromTime({\r\n      hour: value.hour.toString(),\r\n      minute: value.minute.toString()\r\n    })\r\n  );\r\n}\r\n\r\nexport function convertTimeValuesToDegreeValues(\r\n  timeValues: T_TimeForDisplay[]\r\n) {\r\n  return timeValues.map((value) =>\r\n    getDegreeFromTime({\r\n      hour: value.hour,\r\n      minute: value.minute,\r\n      meridiem: value.meridiem as E_Meridiem\r\n    })\r\n  );\r\n}\r\n\r\nexport function getDegreeValuesWithoutOverflow([from, to]: number[]) {\r\n  let maxLimitedTo = to;\r\n\r\n  if (from > to) {\r\n    maxLimitedTo = toolsTimeTimeZoneConstants.clockMarkDegreeRange.max    \r\n  }\r\n\r\n  return [from, maxLimitedTo];\r\n}\r\n\r\nconst clocksData = getClocksDataOfLocalAndOtherTimeZones([\r\n  \"Asia/Kolkata\",\r\n  \"Pacific/Auckland\",\r\n  \"Asia/Tokyo\",\r\n  \"America/New_York\",\r\n  \"Asia/Dubai\",\r\n  \"Asia/Singapore\",\r\n  \"Europe/London\",\r\n  \"Europe/Berlin\"\r\n].filter(tz => tz !== localTimeZoneName));\r\nconst is24HourFormat = false;\r\nconst [clocksDataOfMainTimeZone] = clocksData;\r\nconst timeZonesData = clocksData.map((clock, index) => {\r\n  const nextHourValue = get24HourValue(\r\n    clocksDataOfMainTimeZone.hour,\r\n    clocksDataOfMainTimeZone.meridiem as E_Meridiem\r\n  ) + 1;\r\n  const nextNextHourValue = nextHourValue + 1;\r\n  const degreeValues = convertTimeValuesToDegreeValues([\r\n    {\r\n      hour: nextHourValue.toString(),\r\n      minute: \"0\",\r\n      meridiem: getMeridiemFrom24HourValue(nextHourValue)\r\n    },\r\n    {\r\n      hour: nextNextHourValue.toString(),\r\n      minute: \"0\",\r\n      meridiem: getMeridiemFrom24HourValue(nextNextHourValue)\r\n    }\r\n  ]);\r\n  const degreeValuesWithoutOverflow = getDegreeValuesWithoutOverflow(degreeValues);\r\n  const timeValuesForDisplay = convertDegreeValuesToTimeValuesForDisplay(\r\n    degreeValuesWithoutOverflow,\r\n    is24HourFormat\r\n  );\r\n\r\n  return {\r\n    ...clock,\r\n    timeRange: {\r\n      degreeValues: degreeValuesWithoutOverflow,\r\n      timeValuesForDisplay\r\n    }\r\n  };\r\n});\r\n\r\nexport const initialState: T_TimeRangeSelectorState = {\r\n  timeZonesData,\r\n  is24HourFormat\r\n};\r\n\r\nexport function getTimeRangeSelectorEventHandlers(dispatch: React.Dispatch<T_TimeRangeSelectorAction>\r\n  ) {\r\n  const handle24HourFormatToggle = () => {\r\n    dispatch([E_TimeRangeSelectorActions.toggle24HourFormat]);\r\n  };\r\n  const handleTimeRangeChange = (value: T_Degree | T_Degree[]) => {\r\n    dispatch([E_TimeRangeSelectorActions.setTimeRangeHandle, value]);\r\n  };\r\n  const handleTimeZoneListItemAction = (\r\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    const { timeZoneName, actionName } = event.currentTarget.dataset;\r\n    if (timeZoneName && actionName) {\r\n      switch (actionName as unknown as E_TimeRangeSelectorTimeZoneListItemActions) {\r\n        case E_TimeRangeSelectorTimeZoneListItemActions.setAsMain: {\r\n          dispatch([E_TimeRangeSelectorActions.setMainTimeZone, timeZoneName]);\r\n          return;\r\n        }\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    handle24HourFormatToggle,\r\n    handleTimeRangeChange,\r\n    handleTimeZoneListItemAction\r\n  };\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport { SliderProps } from \"rc-slider\";\r\nimport { useEffect, useReducer, useState } from \"react\";\r\n\r\nimport { toNumber } from \"shared/helpers/number\";\r\nimport { useActiveBreakpoint } from \"shared/hooks/window\";\r\nimport {\r\n  convertDateTimeValuesToDegreeValues,\r\n  convertDegreeValuesToTimeValuesForDisplay,\r\n  get24HourValue,\r\n  getClockMarksResponsive,\r\n  getTimeRangeSelectorEventHandlers,\r\n  initialState,\r\n  getSliderStylePropsResponsive\r\n} from \"./helpers\";\r\nimport {\r\n  E_TimeRangeSelectorActions,\r\n  T_Degree,\r\n  T_TimeRangeSelectorAction,\r\n  T_TimeRangeSelectorState\r\n} from \"./types\";\r\n\r\nexport function useTimeRangeSelector() {\r\n  const [state, dispatch] = useReducer(timeRangeSelectorReducer, initialState);\r\n  const eventHandlers = getTimeRangeSelectorEventHandlers(dispatch);\r\n\r\n  useEffect(() => {\r\n    const [dataOfMainTimeZone] = state.timeZonesData;\r\n    eventHandlers.handleTimeRangeChange(\r\n      dataOfMainTimeZone.timeRange.degreeValues\r\n    );\r\n  }, []);\r\n\r\n  return {\r\n    state,\r\n    eventHandlers\r\n  };\r\n}\r\n\r\nexport function useSliderPropsResponsive(\r\n  initialSliderProps: SliderProps,\r\n  isTarget24HourFormat: boolean,\r\n) {\r\n  const activeBreakpoint = useActiveBreakpoint();\r\n  const [sliderProps, setSliderProps] = useState({\r\n    marks: getClockMarksResponsive(isTarget24HourFormat, activeBreakpoint),\r\n    ...initialSliderProps\r\n  });\r\n\r\n  useEffect(() => {\r\n    const newClockMarks = getClockMarksResponsive(isTarget24HourFormat, activeBreakpoint);\r\n    const newStyleProps = getSliderStylePropsResponsive(initialSliderProps, activeBreakpoint);\r\n    \r\n    setSliderProps({\r\n      marks: newClockMarks,\r\n      ...newStyleProps\r\n    });\r\n\r\n  }, [isTarget24HourFormat, activeBreakpoint, initialSliderProps]);\r\n\r\n  return sliderProps;\r\n}\r\n\r\nfunction timeRangeSelectorReducer(\r\n  state: T_TimeRangeSelectorState,\r\n  [type, payload]: T_TimeRangeSelectorAction\r\n): T_TimeRangeSelectorState {\r\n  switch (type) {\r\n    case E_TimeRangeSelectorActions.toggle24HourFormat: {\r\n      return {\r\n        ...state,\r\n        is24HourFormat: !state.is24HourFormat\r\n      };\r\n    }\r\n\r\n    case E_TimeRangeSelectorActions.setMainTimeZone: {\r\n      const newMainTimeZoneName = payload as string;\r\n      const mainTimeZoneData = state.timeZonesData.find(\r\n        (tzData) => tzData.timeZoneName === newMainTimeZoneName\r\n      );\r\n      const otherTimeZonesData = state.timeZonesData.filter(\r\n        (tzData) => tzData.timeZoneName !== newMainTimeZoneName\r\n      );\r\n\r\n      if (mainTimeZoneData) {\r\n        return {\r\n          ...state,\r\n          timeZonesData: [mainTimeZoneData, ...otherTimeZonesData]\r\n        };\r\n      }\r\n\r\n      return state;\r\n    }\r\n\r\n    case E_TimeRangeSelectorActions.setTimeRangeHandle: {\r\n      const mainTimeZoneDegreeValues = payload as T_Degree[];\r\n      const mainTimeZoneTimeValuesForDisplay =\r\n        convertDegreeValuesToTimeValuesForDisplay(\r\n          mainTimeZoneDegreeValues,\r\n          state.is24HourFormat\r\n        );\r\n      const [mainTimeZoneData] = state.timeZonesData;\r\n      const newTimeZonesData = state.timeZonesData.map((tzData, index) => {\r\n        const isTheMainTimeZone = index === 0;\r\n\r\n        if (isTheMainTimeZone) {\r\n          return {\r\n            ...tzData,\r\n            timeRange: {\r\n              degreeValues: mainTimeZoneDegreeValues,\r\n              timeValuesForDisplay: mainTimeZoneTimeValuesForDisplay\r\n            }\r\n          };\r\n        }\r\n\r\n        const mainTimeZoneDateTime = DateTime.local().setZone(\r\n          mainTimeZoneData.timeZoneName\r\n        );\r\n        const [\r\n          mainTimeZoneTimeValuesForDisplayFrom,\r\n          mainTimeZoneTimeValuesForDisplayTo\r\n        ] = mainTimeZoneTimeValuesForDisplay;\r\n        const targetTimeZoneDateTimeFrom = mainTimeZoneDateTime\r\n          .set({\r\n            hour: get24HourValue(\r\n              mainTimeZoneTimeValuesForDisplayFrom.hour,\r\n              mainTimeZoneTimeValuesForDisplayFrom.meridiem\r\n            ),\r\n            minute: toNumber(mainTimeZoneTimeValuesForDisplayFrom.minute)\r\n          })\r\n          .setZone(tzData.timeZoneName);\r\n        const targetTimeZoneDateTimeTo = mainTimeZoneDateTime\r\n          .set({\r\n            hour: get24HourValue(\r\n              mainTimeZoneTimeValuesForDisplayTo.hour,\r\n              mainTimeZoneTimeValuesForDisplayTo.meridiem\r\n            ),\r\n            minute: toNumber(mainTimeZoneTimeValuesForDisplayTo.minute)\r\n          })\r\n          .setZone(tzData.timeZoneName);\r\n        const degreeValues = convertDateTimeValuesToDegreeValues([\r\n          targetTimeZoneDateTimeFrom,\r\n          targetTimeZoneDateTimeTo\r\n        ]);\r\n        const timeValuesForDisplay = convertDegreeValuesToTimeValuesForDisplay(\r\n          degreeValues,\r\n          state.is24HourFormat\r\n        );\r\n\r\n        return {\r\n          ...tzData,\r\n          timeRange: {\r\n            degreeValues,\r\n            timeValuesForDisplay\r\n          }\r\n        };\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        timeZonesData: newTimeZonesData\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Slider from \"rc-slider\";\r\nimport \"rc-slider/assets/index.css\";\r\n\r\nimport { useSliderPropsResponsive, useTimeRangeSelector } from \"./hooks\";\r\nimport toolsTimeTimeZoneConstants from \"./constants\";\r\nimport { E_TimeRangeSelectorTimeZoneListItemActions } from \"./types\";\r\nimport \"./styles.scss\";\r\n\r\nfunction TimeZone() {\r\n  const { state, eventHandlers } = useTimeRangeSelector();\r\n  const sliderPropsResponsive = useSliderPropsResponsive(\r\n    toolsTimeTimeZoneConstants.sliderStyleProps,\r\n    state.is24HourFormat\r\n  );\r\n  const [dataOfMainTimeZone, ...dataOfOtherTimeZones] = state.timeZonesData;\r\n  const [mainTimeZoneTimeRangeFrom, mainTimeZoneTimeRangeTo] =\r\n    dataOfMainTimeZone.timeRange.timeValuesForDisplay;\r\n\r\n  return (\r\n    <div className=\"TimeZone h-screen container mx-auto w-full sm:w-11/12 md:w-10/12 lg:w-11/12 xl:w-10/12 2xl:w-8/12\">\r\n      <div className=\"grid grid-cols-1 gap-3 sm:gap-6 2xl:gap-8 mt-5 lg:mt-10\">\r\n        {/* Main timezone and slider */}\r\n        <div className=\"bg-white shadow-lg bg-gradient-to-t from-neutral-100 px-5 pt-3 sm:px-8 sm:pt-6 md:px-10 md:pt-8 pb-7 sm:pb-11 flex flex-col justify-center select-none\">\r\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-10\">\r\n            {/* Main timezone meta info */}\r\n            <div className=\"flex flex-col\">\r\n              <span className=\"font-semibold text-lg sm:text-2xl font-sans text-gray-500\">\r\n                {dataOfMainTimeZone.countryName}\r\n              </span>\r\n              <div className=\"text-gray-500 tracking-wide flex flex-col\">\r\n                <span className=\"text-sm sm:text-base\">{dataOfMainTimeZone.offsetNameLong}</span>\r\n                <span className=\"font-mono text-xs sm:text-sm\">{dataOfMainTimeZone.offsetNameShort}</span>\r\n              </div>\r\n            </div>\r\n            {/* Main timezone selected time range */}\r\n            <div className=\"my-2 m-auto sm:m-0 text-lg sm:text-3xl text-gray-600 tracking-wide\">\r\n              <span className=\"bg-emerald-100 p-3 rounded-xl shadow-lg\">\r\n                {mainTimeZoneTimeRangeFrom.hour}:\r\n                {mainTimeZoneTimeRangeFrom.minute}&nbsp;\r\n                <span className=\"text-xs sm:text-base opacity-70\">\r\n                  {mainTimeZoneTimeRangeFrom.meridiem}\r\n                </span>\r\n              </span>\r\n              <span className=\"text-gray-400\">&nbsp;&nbsp;–&nbsp;&nbsp;</span>\r\n              <span className=\"bg-red-100 p-3 rounded-xl shadow-lg\">\r\n                {mainTimeZoneTimeRangeTo.hour}:{mainTimeZoneTimeRangeTo.minute}\r\n                &nbsp;\r\n                <span className=\"text-xs sm:text-base opacity-70\">\r\n                  {mainTimeZoneTimeRangeTo.meridiem}\r\n                </span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          {/* Time range slider */}\r\n          <div className=\"mt-7 sm:mt-10\">\r\n            <Slider\r\n              range\r\n              min={toolsTimeTimeZoneConstants.clockMarkDegreeRange.min}\r\n              max={toolsTimeTimeZoneConstants.clockMarkDegreeRange.max}\r\n              step={15}\r\n              value={dataOfMainTimeZone.timeRange.degreeValues}\r\n              pushable={15}\r\n              onChange={eventHandlers.handleTimeRangeChange}\r\n              draggableTrack\r\n              {...sliderPropsResponsive}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* Other (favorite) timezones list */}\r\n        <div className=\"m-auto w-11/12 sm:w-full grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-5 xl:gap-7 px-5 py-3 md:p-4 rounded-lg\">\r\n          {dataOfOtherTimeZones.map((tzData) => {\r\n            const [timeRangeFrom, timeRangeTo] =\r\n              tzData.timeRange.timeValuesForDisplay;\r\n            return (\r\n              <div\r\n                className=\"rounded-lg bg-white shadow-lg shadow-neutral-300\"\r\n                key={tzData.timeZoneName}\r\n              >\r\n                <div className=\"flex flex-col\">\r\n                  {/* Time Zone meta */}\r\n                  <div className=\"px-5 py-3 sm:py-0 flex flex-col text-gray-500 tracking-wide sm:h-24 justify-center\">\r\n                    <div className=\"font-bold text-sm sm:text-base\">\r\n                      {tzData.countryName}\r\n                    </div>\r\n                    <div className=\"text-gray-500 sm:mt-1 flex flex-col\">\r\n                      <span className=\"text-xs sm:text-sm\">{tzData.offsetNameLong}</span>\r\n                      <span className=\"font-mono text-2xs sm:text-xs\">{tzData.offsetNameShort}</span>\r\n                    </div>\r\n                  </div>\r\n                  {/* Time range */}\r\n                  <div className=\"-mb-2 py-4 sm:py-7 text-center text-md sm:text-xl text-gray-600 tracking-wide bg-slate-100\">\r\n                    <span className=\"bg-emerald-100 p-2 sm:p-3 rounded-lg shadow-lg\">\r\n                      {timeRangeFrom.hour}:{timeRangeFrom.minute}&nbsp;\r\n                      <span className=\"text-2xs sm:text-xs opacity-70\">\r\n                        {timeRangeFrom.meridiem}\r\n                      </span>\r\n                    </span>\r\n                    <span className=\"text-gray-400\">\r\n                      &nbsp;&nbsp;–&nbsp;&nbsp;\r\n                    </span>\r\n                    <span className=\"bg-red-100 p-2 sm:p-3 rounded-lg shadow-lg\">\r\n                      {timeRangeTo.hour}:{timeRangeTo.minute}&nbsp;\r\n                      <span className=\"text-2xs sm:text-xs opacity-70\">\r\n                        {timeRangeTo.meridiem}\r\n                      </span>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"grid grid-cols-10 mt-2\">\r\n                  {[\r\n                    E_TimeRangeSelectorTimeZoneListItemActions.setAsMain,\r\n                    E_TimeRangeSelectorTimeZoneListItemActions.change,\r\n                    E_TimeRangeSelectorTimeZoneListItemActions.remove\r\n                  ].map((btnName) => (\r\n                    <button\r\n                      key={btnName}\r\n                      className=\"favItemActionBtn\"\r\n                      data-time-zone-name={tzData.timeZoneName}\r\n                      data-action-name={btnName}\r\n                      onClick={eventHandlers.handleTimeZoneListItemAction}\r\n                    >\r\n                      {btnName}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeZone;\r\n","import { T_ClockDataOfTimeZone } from \"shared/helpers/timeZone/types\";\r\nimport { T_Nullable } from \"shared/types/generics\";\r\n\r\nexport enum E_Meridiem {\r\n  AM = \"AM\",\r\n  PM = \"PM\"\r\n};\r\n\r\nexport type T_Degree = number;\r\n\r\nexport type T_HourOrMinute = number;\r\n\r\nexport type T_Time24HrsFormat = {\r\n  hour: T_HourOrMinute;\r\n  minute: T_HourOrMinute;\r\n};\r\n\r\nexport type T_TimeForDisplay = {\r\n  hour: string;\r\n  minute: string;\r\n  meridiem?: T_Nullable<E_Meridiem>;\r\n};\r\n\r\nexport type T_TimeRangeDegreeValues = T_Degree[];\r\n\r\nexport type T_TimeRangeTimeValuesForDisplay = T_TimeForDisplay[];\r\n\r\nexport interface T_TimeRange {\r\n  degreeValues: T_TimeRangeDegreeValues;\r\n  timeValuesForDisplay: T_TimeRangeTimeValuesForDisplay;\r\n}\r\n\r\nexport type T_ClockDataOfTimeZoneWithTimeRange = T_ClockDataOfTimeZone & {\r\n  timeRange: T_TimeRange;\r\n}\r\n\r\nexport type T_TimeRangeSelectorState = {\r\n  timeZonesData: T_ClockDataOfTimeZoneWithTimeRange[];\r\n  is24HourFormat: boolean;\r\n};\r\n\r\nexport enum E_TimeRangeSelectorTimeZoneListItemActions {\r\n  setAsMain = \"SET AS MAIN\",\r\n  change = \"CHANGE\",\r\n  remove = \"REMOVE\",\r\n}\r\n\r\nexport enum E_TimeRangeSelectorActions {\r\n  setTimeRangeHandle,\r\n  toggle24HourFormat,\r\n  setMainTimeZone,\r\n  changeTimeZone,\r\n  removeTimeZone\r\n}\r\n\r\nexport type T_TimeRangeSelectorAction = [\r\n  type: E_TimeRangeSelectorActions,\r\n  payload?: any\r\n];\r\n\r\nexport interface T_TimeRangeSelectorClockMarksMap {\r\n  [x: T_Degree | string]: T_HourOrMinute;\r\n};\r\n","export function toNumber(x: any) {\r\n  return +x;\r\n}\r\n\r\nexport function round(num: number | string, fractionDigits: number = 2) {\r\n  return toNumber(toNumber(num).toFixed(fractionDigits));\r\n}\r\n","import { DateTime } from \"luxon\";\r\nimport worldCountries from \"shared/constants/worldCountries\";\r\nimport { T_ClockDataOfTimeZone } from \"./types\";\r\n\r\nexport function getClocksDataOfLocalAndOtherTimeZones(otherTimeZones?: string[]) {\r\n  const now = DateTime.now();\r\n  const clocksData = [getClockDataOfTimeZone(now)];\r\n  if (otherTimeZones) {\r\n    clocksData.push(\r\n      ...otherTimeZones.map((tz) => getClockDataOfTimeZone(now, tz))\r\n    );\r\n  }\r\n  return clocksData;\r\n}\r\n\r\nexport function getClockDataOfTimeZone(\r\n  datetime: DateTime,\r\n  timeZone?: string\r\n): T_ClockDataOfTimeZone {\r\n  const nowInTimeZone = timeZone ? datetime.setZone(timeZone) : datetime;\r\n  const {\r\n    // timeZone\r\n    zoneName,\r\n    offsetNameLong,\r\n    offsetNameShort,\r\n    // time\r\n    hour,\r\n    minute,\r\n    second,\r\n    isInDST,\r\n    // date\r\n    year,\r\n    monthShort,\r\n    monthLong,\r\n    day,\r\n    weekdayLong,\r\n    weekdayShort\r\n  } = nowInTimeZone;\r\n\r\n  const timeZoneName = standardizeTimeZoneName(zoneName);\r\n  const meridiem = nowInTimeZone.toFormat(\"a\");\r\n  const countryInfo = worldCountries.find(\r\n    (info) => info.timeZone === timeZoneName\r\n  ) || {\r\n    countryCode: \"\",\r\n    countryName: \"\"\r\n  };\r\n\r\n  return {\r\n    timeISOString: datetime.toISO(),\r\n    isLocal: !timeZone,\r\n    timeZoneName,\r\n    offsetNameLong,\r\n    offsetNameShort,\r\n    ...countryInfo,\r\n    hour: nowInTimeZone.toFormat(\"hh\"),\r\n    minute: nowInTimeZone.toFormat(\"mm\"),\r\n    second: nowInTimeZone.toFormat(\"ss\"),\r\n    meridiem,\r\n    isInDST,\r\n    year,\r\n    monthShort,\r\n    monthLong,\r\n    day,\r\n    weekdayLong,\r\n    weekdayShort,\r\n    hourDeg: (hour / 12) * 360 + (minute / 60) * 30 + 90,\r\n    minuteDeg: (minute / 60) * 360 + (second / 60) * 6 + 90,\r\n    secondDeg: (second / 60) * 360 + 90\r\n  };\r\n}\r\n\r\nexport const localTimeZoneName = standardizeTimeZoneName(DateTime.now().zoneName);\r\n\r\nexport function standardizeTimeZoneName(timeZoneName: string) {\r\n  return timeZoneName.replace(\r\n    // TODO: Stupid Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=580195\r\n    \"Calcutta\",\r\n    \"Kolkata\"\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["handleCommonStyle","borderTopRightRadius","borderTopLeftRadius","borderBottomRightRadius","borderBottomLeftRadius","borderWidth","height","width","marginTop","degreePerClockMark","clockMarkCount","clockTimeDelimiter","clockMarkDegreeRange","min","max","sliderStyleProps","handleStyle","borderColor","backgroundColor","dotStyle","borderRadius","trackStyle","railStyle","get12HourValue","value","twelveHourValue","getMeridiemFrom24HourValue","E_Meridiem","PM","AM","get24HourValue","meridiem","numericValue","toNumber","getTimeFromDegreeForDisplay","degree","isTarget24HourFormat","hour","minute","toolsTimeTimeZoneConstants","time","String","padStart","getTimeForDisplay","getDegreeFromTime","getClockMarksResponsive","activeBreakpoint","clockMarks","index","key","label","name","windowConstants","none","style","fontSize","small","medium","getSliderStylePropsResponsive","sliderProps","newSliderProps","dotTrackRailHeight","Array","isArray","convertDegreeValuesToTimeValuesForDisplay","degreeValues","map","convertDateTimeValuesToDegreeValues","dateTimeValues","toString","convertTimeValuesToDegreeValues","timeValues","getDegreeValuesWithoutOverflow","_ref","from","to","maxLimitedTo","clocksData","getClocksDataOfLocalAndOtherTimeZones","filter","tz","localTimeZoneName","is24HourFormat","clocksDataOfMainTimeZone","initialState","timeZonesData","clock","nextHourValue","nextNextHourValue","degreeValuesWithoutOverflow","timeRange","timeValuesForDisplay","getTimeRangeSelectorEventHandlers","dispatch","handle24HourFormatToggle","E_TimeRangeSelectorActions","toggle24HourFormat","handleTimeRangeChange","setTimeRangeHandle","handleTimeZoneListItemAction","event","timeZoneName","actionName","currentTarget","dataset","E_TimeRangeSelectorTimeZoneListItemActions","setAsMain","setMainTimeZone","useTimeRangeSelector","state","useReducer","timeRangeSelectorReducer","eventHandlers","useEffect","dataOfMainTimeZone","useSliderPropsResponsive","initialSliderProps","useActiveBreakpoint","setSliderProps","useState","marks","newClockMarks","newStyleProps","type","payload","newMainTimeZoneName","mainTimeZoneData","find","tzData","otherTimeZonesData","mainTimeZoneDegreeValues","mainTimeZoneTimeValuesForDisplay","newTimeZonesData","mainTimeZoneDateTime","DateTime","local","setZone","mainTimeZoneTimeValuesForDisplayFrom","mainTimeZoneTimeValuesForDisplayTo","targetTimeZoneDateTimeFrom","set","targetTimeZoneDateTimeTo","sliderPropsResponsive","dataOfOtherTimeZones","mainTimeZoneTimeRangeFrom","mainTimeZoneTimeRangeTo","_jsx","className","children","_jsxs","countryName","offsetNameLong","offsetNameShort","Slider","range","step","pushable","onChange","draggableTrack","timeRangeFrom","timeRangeTo","change","remove","btnName","onClick","x","round","num","fractionDigits","arguments","length","undefined","toFixed","otherTimeZones","now","getClockDataOfTimeZone","push","datetime","timeZone","nowInTimeZone","zoneName","second","isInDST","year","monthShort","monthLong","day","weekdayLong","weekdayShort","standardizeTimeZoneName","toFormat","countryInfo","worldCountries","info","countryCode","timeISOString","toISO","isLocal","hourDeg","minuteDeg","secondDeg","replace"],"sourceRoot":""}