{"version":3,"file":"static/js/6446.bfaad108.chunk.js","mappings":"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","sources":["pages/tools/time/clock/index.tsx","shared/components/clocks/index.tsx","shared/components/countryFlag/index.tsx","shared/helpers/timeZone/index.ts","shared/hooks/clocksData/index.ts","pages/tools/time/clock/styles.scss","webpack://eazy.tools-dev/./src/shared/components/clocks/styles.scss?0e30","webpack://eazy.tools-dev/./src/shared/components/countryFlag/styles.scss?2486"],"sourcesContent":["import React from \"react\";\r\n\r\nimport Clocks from \"shared/components/clocks\";\r\n// import useFuzzySearch from \"hooks/useFuzzySearch\";\r\n// import worldCountries from \"constants/worldCountries\";\r\n// import { fuzzySearch } from \"./utils\";\r\n// import { T_ArrayItem } from \"types/generic\";\r\nimport \"./styles.scss\";\r\n\r\nfunction Clock() {\r\n  // const { inputValue, fuzzySearchResults } = useFuzzySearch<\r\n  //   T_ArrayItem<typeof worldCountries>\r\n  // >(fuzzySearch, worldCountries);\r\n\r\n  return (\r\n    <div className=\"Clock\">\r\n      <Clocks\r\n        otherTimeZones={[\r\n          \"Asia/Kolkata\",\r\n          \"Pacific/Auckland\",\r\n          \"Asia/Ho_Chi_Minh\"\r\n        ]}\r\n      />\r\n      <div className=\"fix\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Clock;\r\n","import React from \"react\";\r\n\r\nimport CountryFlag from \"shared/components/countryFlag\";\r\nimport { useClocksData } from \"shared/hooks/clocksData\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function Clocks({ otherTimeZones }: T_ClocksProps) {\r\n  const clocksData = useClocksData(otherTimeZones);\r\n\r\n  return (\r\n    <div className=\"Clocks\">\r\n      {clocksData.map((clock) => (\r\n        <div key={clock.timeZoneName} className=\"clockWrap\">\r\n          <div className=\"clockMeta\">\r\n            <div className=\"clockMetaHeadWrap\">\r\n              <CountryFlag code={clock.countryCode} />\r\n              &nbsp;\r\n              <span className=\"clockMetaTitle\">{clock.countryName}</span>\r\n              &nbsp;\r\n              {clock.isLocal && (\r\n                <svg\r\n                  className=\"-mt-1 w-5 h-5\"\r\n                  fill=\"#bbb\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"></path>\r\n                </svg>\r\n              )}\r\n            </div>\r\n            {clock.weekdayLong},<br /> {clock.day} {clock.monthLong}{\" \"}\r\n            {clock.year}\r\n          </div>\r\n          <div className=\"analog-clock\">\r\n            <div className=\"analog-clock-face\">\r\n              <div className=\"dots\"></div>\r\n              <div className=\"dots\"></div>\r\n              <div className=\"dots\"></div>\r\n              <div className=\"dots\"></div>\r\n              <div className=\"dots\"></div>\r\n              <div className=\"dots\"></div>\r\n              <div\r\n                style={{ transform: `rotate(${clock.hourDeg}deg)` }}\r\n                className=\"hand hour-hand\"\r\n              ></div>\r\n              <div\r\n                style={{ transform: `rotate(${clock.minuteDeg}deg)` }}\r\n                className=\"hand min-hand\"\r\n              ></div>\r\n              <div\r\n                style={{ transform: `rotate(${clock.secondDeg}deg)` }}\r\n                className=\"hand sec-hand\"\r\n              ></div>\r\n              {clock.isInDST && (\r\n                <i className=\"pt-2 text-center block tracking-wider text-gray-400 text-xs\">\r\n                  daylight\r\n                  <br />\r\n                  saving\r\n                </i>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"digital-clock\">\r\n            <div className=\"digit digit-hour\">{clock.hour}</div>\r\n            <span className=\"self-center text-gray-300 animate-ping\">:</span>\r\n            <div className=\"digit digit-min\">{clock.minute}</div>\r\n            <div className=\"digit digit-sec\">{clock.second}</div>\r\n            <div className=\"meridiem\">{clock.meridiem}</div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <div className=\"clockWrap !justify-center transition duration-300 ease-in-out transform hover:-translate-y-1 hover:shadow-lg group cursor-pointer\">\r\n        <span className=\"self-center group-hover:scale-125 text-2xl\">âž•</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\ntype T_ClocksProps = {\r\n  otherTimeZones?: string[];\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport default function CountryFlag({\r\n  code,\r\n  iconClassName = \"\",\r\n  wrapperClassName = \"\"\r\n}: T_CountryFlagProp) {\r\n  return (\r\n    <span className={wrapperClassName}>\r\n      <i\r\n        className={`countryFlagSprite countryFlag-${code.toLowerCase()} ${iconClassName}`}\r\n      ></i>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport type T_CountryFlagProp = {\r\n  code: string;\r\n  wrapperClassName?: string;\r\n  iconClassName?: string;\r\n};\r\n","import { DateTime } from \"luxon\";\r\nimport worldCountries from \"shared/constants/worldCountries\";\r\nimport { T_ClockDataOfTimeZone } from \"./types\";\r\n\r\nexport function getClocksDataOfLocalAndOtherTimeZones(otherTimeZones?: string[]) {\r\n  const now = DateTime.now();\r\n  const clocksData = [getClockDataOfTimeZone(now)];\r\n  if (otherTimeZones) {\r\n    clocksData.push(\r\n      ...otherTimeZones.map((tz) => getClockDataOfTimeZone(now, tz))\r\n    );\r\n  }\r\n  return clocksData;\r\n}\r\n\r\nexport function getClockDataOfTimeZone(\r\n  datetime: DateTime,\r\n  timeZone?: string\r\n): T_ClockDataOfTimeZone {\r\n  const nowInTimeZone = timeZone ? datetime.setZone(timeZone) : datetime;\r\n  const {\r\n    // timeZone\r\n    zoneName,\r\n    offsetNameLong,\r\n    offsetNameShort,\r\n    // time\r\n    hour,\r\n    minute,\r\n    second,\r\n    isInDST,\r\n    // date\r\n    year,\r\n    monthShort,\r\n    monthLong,\r\n    day,\r\n    weekdayLong,\r\n    weekdayShort\r\n  } = nowInTimeZone;\r\n\r\n  const timeZoneName = standardizeTimeZoneName(zoneName);\r\n  const meridiem = nowInTimeZone.toFormat(\"a\");\r\n  const countryInfo = worldCountries.find(\r\n    (info) => info.timeZone === timeZoneName\r\n  ) || {\r\n    countryCode: \"\",\r\n    countryName: \"\"\r\n  };\r\n\r\n  return {\r\n    timeISOString: datetime.toISO(),\r\n    isLocal: !timeZone,\r\n    timeZoneName,\r\n    offsetNameLong,\r\n    offsetNameShort,\r\n    ...countryInfo,\r\n    hour: nowInTimeZone.toFormat(\"hh\"),\r\n    minute: nowInTimeZone.toFormat(\"mm\"),\r\n    second: nowInTimeZone.toFormat(\"ss\"),\r\n    meridiem,\r\n    isInDST,\r\n    year,\r\n    monthShort,\r\n    monthLong,\r\n    day,\r\n    weekdayLong,\r\n    weekdayShort,\r\n    hourDeg: (hour / 12) * 360 + (minute / 60) * 30 + 90,\r\n    minuteDeg: (minute / 60) * 360 + (second / 60) * 6 + 90,\r\n    secondDeg: (second / 60) * 360 + 90\r\n  };\r\n}\r\n\r\nexport const localTimeZoneName = standardizeTimeZoneName(DateTime.now().zoneName);\r\n\r\nexport function standardizeTimeZoneName(timeZoneName: string) {\r\n  return timeZoneName.replace(\r\n    // TODO: Stupid Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=580195\r\n    \"Calcutta\",\r\n    \"Kolkata\"\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { T_ClocksDataState } from \"shared/helpers/timeZone/types\";\r\nimport { getClocksDataOfLocalAndOtherTimeZones, localTimeZoneName } from \"shared/helpers/timeZone\";\r\n\r\nexport function useClocksData(otherTimeZones?: string[]) {\r\n  const otherTimeZonesOnly = otherTimeZones?.filter(\r\n    (tz) => localTimeZoneName !== tz\r\n  );\r\n\r\n  const [state, setState] = useState<T_ClocksDataState>(\r\n    getClocksDataOfLocalAndOtherTimeZones(otherTimeZonesOnly)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setState(getClocksDataOfLocalAndOtherTimeZones(otherTimeZonesOnly));\r\n    }, 1000);\r\n    return () => clearInterval(intervalId);\r\n    // otherTimeZonesWithoutLocal is computed based on otherTimeZones\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [otherTimeZones]);\r\n\r\n  return state;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["_jsxs","className","children","_jsx","Clocks","otherTimeZones","_ref","clocksData","useClocksData","map","clock","CountryFlag","code","countryCode","countryName","isLocal","fill","viewBox","xmlns","d","weekdayLong","day","monthLong","year","style","transform","hourDeg","minuteDeg","secondDeg","isInDST","hour","minute","second","meridiem","timeZoneName","iconClassName","wrapperClassName","toLowerCase","getClocksDataOfLocalAndOtherTimeZones","now","DateTime","getClockDataOfTimeZone","push","tz","datetime","timeZone","nowInTimeZone","setZone","zoneName","offsetNameLong","offsetNameShort","monthShort","weekdayShort","standardizeTimeZoneName","toFormat","countryInfo","worldCountries","find","info","timeISOString","toISO","localTimeZoneName","replace","otherTimeZonesOnly","filter","state","setState","useState","useEffect","intervalId","setInterval","clearInterval"],"sourceRoot":""}