{"version":3,"file":"static/js/663.324b2f4c.chunk.js","mappings":"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","sources":["pages/tools/time/timezone/constants.ts","pages/tools/time/timezone/helpers.ts","pages/tools/time/timezone/hooks.ts","pages/tools/time/timezone/index.tsx","pages/tools/time/timezone/styles.ts","pages/tools/time/timezone/types.ts","shared/helpers/number.ts","shared/helpers/timeZone/index.ts","webpack://mysite-dev/./src/pages/tools/time/timezone/styles.scss?9f31"],"sourcesContent":["const degreePerClockMark = 60;\nconst clockMarkCount = 24;\nconst clockMarkDegreeFrom = 0;\nconst clockMarkDegreeTo = degreePerClockMark * clockMarkCount;\nconst clockTimeDelimiter = \":\";\n\nconst toolsTimeTimeZoneConstants = {\n  degreePerClockMark,\n  clockMarkCount,\n  clockTimeDelimiter,\n  clockMarkDegreeRange: {\n    min: clockMarkDegreeFrom,\n    max: clockMarkDegreeTo\n  },\n};\n\nexport default toolsTimeTimeZoneConstants;\n","import { DateTime } from \"luxon\";\nimport { SliderProps } from \"rc-slider\";\nimport { MarkObj } from \"rc-slider/lib/Marks\";\n\nimport { toNumber } from \"shared/helpers/number\";\nimport { getClocksDataOfLocalAndOtherTimeZones, localTimeZoneName } from \"shared/helpers/timeZone\";\nimport { T_Nullable } from \"shared/types/generics\";\nimport { E_Breakpoint } from \"shared/types/window\";\nimport toolsTimeTimeZoneConstants from \"./constants\";\nimport {\n  T_Degree,\n  T_Time24HrsFormat,\n  T_TimeForDisplay,\n  E_Meridiem,\n  T_HourOrMinute,\n  T_TimeRangeSelectorClockMarksMap,\n  T_TimeRangeSelectorState,\n  T_TimeRangeSelectorAction,\n  E_TimeRangeSelectorActions,\n  E_TimeRangeSelectorTimeZoneListItemActions\n} from \"./types\";\n\nexport function get12HourValue(value: T_HourOrMinute) {\n  const twelveHourValue = value % 12;\n  return twelveHourValue ? twelveHourValue : 12; // the hour '0' should be '12'\n}\n\nexport function getMeridiemFrom24HourValue(value: number) {\n  return value >= 12 ? E_Meridiem.PM : E_Meridiem.AM\n}\n\nexport function get24HourValue(\n  value: string,\n  meridiem?: T_Nullable<E_Meridiem>\n) {\n  const numericValue = toNumber(value);\n\n  if (meridiem) {\n    if (meridiem === E_Meridiem.PM) {\n      if (numericValue < 12) {\n        return numericValue + 12;\n      }\n    } else if (numericValue === 12) {\n      return 0;\n    }\n  }\n\n  return numericValue ?? 0;\n}\n\nfunction getTimeForDisplay(\n  time: T_Time24HrsFormat,\n  isTarget24HourFormat: boolean\n): T_TimeForDisplay {\n  let { hour, minute } = time;\n  let meridiem = null;\n\n  if (!isTarget24HourFormat) {\n    meridiem = (hour >= 12 && hour !== 24) ? E_Meridiem.PM : E_Meridiem.AM;\n    hour = get12HourValue(hour);\n  }\n\n  return {\n    hour: String(hour).padStart(2, \"0\"),\n    minute: String(minute).padStart(2, \"0\"),\n    meridiem\n  };\n}\n\nexport function getTimeFromDegreeForDisplay(\n  degree: T_Degree,\n  isTarget24HourFormat: boolean\n): T_TimeForDisplay {\n  let hour = 0;\n  let minute = 0;\n\n  if (degree !== 0) {\n    minute = degree % toolsTimeTimeZoneConstants.degreePerClockMark;\n    hour = (degree - minute) / toolsTimeTimeZoneConstants.degreePerClockMark;\n  }\n\n  return getTimeForDisplay({ hour, minute }, isTarget24HourFormat);\n}\n\nexport function getDegreeFromTime(time: T_TimeForDisplay) {\n  const hourIn24HourFormat = get24HourValue(time.hour, time.meridiem);\n\n  return (\n    hourIn24HourFormat * toolsTimeTimeZoneConstants.degreePerClockMark +\n    toNumber(time.minute)\n  );\n}\n\nexport function getClockMarksDeviceStyleOptimized(\n  isTarget24HourFormat: boolean,\n  activeBreakpoint?: E_Breakpoint\n) {\n  const clockMarks: SliderProps[\"marks\"] = {};\n\n  for (\n    let index = 0;\n    index <= toolsTimeTimeZoneConstants.clockMarkCount;\n    index++\n  ) {\n    const key = index * toolsTimeTimeZoneConstants.degreePerClockMark;\n    const label = isTarget24HourFormat ? index : get12HourValue(index);\n    let value: React.ReactNode | MarkObj;\n\n    switch (activeBreakpoint) {\n      case E_Breakpoint.none: {\n        value = {\n          style: {\n            fontSize: 8,\n            marginTop: -3\n          },\n          label\n        };\n        break; \n      }\n      case E_Breakpoint.small:\n      case E_Breakpoint.medium: {\n        value = {\n          style: {\n            fontSize: 10,\n            marginTop: -2\n          },\n          label\n        };\n        break; \n      }\n      default: {\n        value = label\n      }\n    }\n\n    clockMarks[key] = value;\n  }\n\n  return clockMarks;\n}\n\nexport function getSliderStylePropsDeviceStyleOptimized(sliderProps: SliderProps, activeBreakpoint?: E_Breakpoint) {\n  let newSliderProps = { ...sliderProps } as SliderProps;\n  let handleStyle;\n  let dotStyle;\n  let trackStyle;\n  let railStyle;\n\n  switch (activeBreakpoint) {\n    case E_Breakpoint.none: {\n      const dotTrackRailHeight = 20;\n      handleStyle = {\n        borderWidth: 2,\n        width: 10\n      };\n      dotStyle = {\n        height: dotTrackRailHeight,\n        borderWidth: 1\n      }\n      trackStyle = {\n        height: dotTrackRailHeight\n      }\n      railStyle = {\n        height: dotTrackRailHeight\n      }\n      break;\n    }\n  }\n\n  if (Array.isArray(sliderProps.handleStyle) && handleStyle) {\n    newSliderProps.handleStyle = [\n      { ...sliderProps.handleStyle[0], ...handleStyle },\n      { ...sliderProps.handleStyle[1], ...handleStyle }\n    ];\n  }\n  if (sliderProps.dotStyle && dotStyle) {\n    newSliderProps.dotStyle = { ...sliderProps.dotStyle, ...dotStyle };\n  }\n  if (sliderProps.trackStyle && trackStyle) {\n    newSliderProps.trackStyle = { ...sliderProps.trackStyle, ...trackStyle };\n  }\n  if (sliderProps.railStyle && railStyle) {\n    newSliderProps.railStyle = { ...sliderProps.railStyle, ...railStyle };\n  }\n\n  return newSliderProps;\n}\n\nexport function convertDegreeValuesToTimeValuesForDisplay(\n  degreeValues: T_Degree[],\n  isTarget24HourFormat: boolean\n) {\n  return degreeValues.map((value) =>\n    getTimeFromDegreeForDisplay(value, isTarget24HourFormat)\n  );\n}\n\nexport function convertDateTimeValuesToDegreeValues(\n  dateTimeValues: DateTime[]\n) {\n  return dateTimeValues.map((value) =>\n    getDegreeFromTime({\n      hour: value.hour.toString(),\n      minute: value.minute.toString()\n    })\n  );\n}\n\nexport function convertTimeValuesToDegreeValues(\n  timeValues: T_TimeForDisplay[]\n) {\n  return timeValues.map((value) =>\n    getDegreeFromTime({\n      hour: value.hour,\n      minute: value.minute,\n      meridiem: value.meridiem as E_Meridiem\n    })\n  );\n}\n\nexport function getDegreeValuesWithoutOverflow([from, to]: number[]) {\n  let maxLimitedTo = to;\n\n  if (from > to) {\n    maxLimitedTo = toolsTimeTimeZoneConstants.clockMarkDegreeRange.max    \n  }\n\n  return [from, maxLimitedTo];\n}\n\nconst clocksData = getClocksDataOfLocalAndOtherTimeZones([\n  \"Asia/Kolkata\",\n  \"Pacific/Auckland\",\n  \"Asia/Tokyo\",\n  \"Europe/London\",\n  \"Europe/Berlin\",\n].filter(tz => tz !== localTimeZoneName));\nconst is24HourFormat = false;\nconst [clocksDataOfMainTimeZone] = clocksData;\nconst timeZonesData = clocksData.map((clock, index) => {\n  const nextHourValue = get24HourValue(\n    clocksDataOfMainTimeZone.hour,\n    clocksDataOfMainTimeZone.meridiem as E_Meridiem\n  ) + 1;\n  const nextNextHourValue = nextHourValue + 1;\n  const degreeValues = convertTimeValuesToDegreeValues([\n    {\n      hour: nextHourValue.toString(),\n      minute: \"0\",\n      meridiem: getMeridiemFrom24HourValue(nextHourValue)\n    },\n    {\n      hour: nextNextHourValue.toString(),\n      minute: \"0\",\n      meridiem: getMeridiemFrom24HourValue(nextNextHourValue)\n    }\n  ]);\n  const degreeValuesWithoutOverflow = getDegreeValuesWithoutOverflow(degreeValues);\n  const timeValuesForDisplay = convertDegreeValuesToTimeValuesForDisplay(\n    degreeValuesWithoutOverflow,\n    is24HourFormat\n  );\n\n  return {\n    ...clock,\n    timeRange: {\n      degreeValues: degreeValuesWithoutOverflow,\n      timeValuesForDisplay\n    }\n  };\n});\n\nexport const initialState: T_TimeRangeSelectorState = {\n  timeZonesData,\n  is24HourFormat\n};\n\nexport function getTimeRangeSelectorEventHandlers(dispatch: React.Dispatch<T_TimeRangeSelectorAction>\n  ) {\n  const handle24HourFormatToggle = () => {\n    dispatch([E_TimeRangeSelectorActions.toggle24HourFormat]);\n  };\n  const handleTimeRangeChange = (value: T_Degree | T_Degree[]) => {\n    dispatch([E_TimeRangeSelectorActions.setTimeRangeHandle, value]);\n  };\n  const handleTimeZoneListItemAction = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const { timeZoneName, actionName } = event.currentTarget.dataset;\n    if (timeZoneName && actionName) {\n      switch (actionName as unknown as E_TimeRangeSelectorTimeZoneListItemActions) {\n        case E_TimeRangeSelectorTimeZoneListItemActions.setAsMain: {\n          dispatch([E_TimeRangeSelectorActions.setMainTimeZone, timeZoneName]);\n          return;\n        }\n        default:\n          return;\n      }\n    }\n  };\n\n  return {\n    handle24HourFormatToggle,\n    handleTimeRangeChange,\n    handleTimeZoneListItemAction\n  };\n}\n","import { DateTime } from \"luxon\";\nimport { SliderProps } from \"rc-slider\";\nimport { useEffect, useReducer, useState } from \"react\";\n\nimport { toNumber } from \"shared/helpers/number\";\nimport { useActiveBreakpoint } from \"shared/hooks/window\";\nimport {\n  convertDateTimeValuesToDegreeValues,\n  convertDegreeValuesToTimeValuesForDisplay,\n  get24HourValue,\n  getClockMarksDeviceStyleOptimized,\n  getTimeRangeSelectorEventHandlers,\n  initialState,\n  getSliderStylePropsDeviceStyleOptimized\n} from \"./helpers\";\nimport {\n  E_TimeRangeSelectorActions,\n  T_Degree,\n  T_TimeRangeSelectorAction,\n  T_TimeRangeSelectorState\n} from \"./types\";\n\nexport function useTimeRangeSelector() {\n  const [state, dispatch] = useReducer(timeRangeSelectorReducer, initialState);\n  const eventHandlers = getTimeRangeSelectorEventHandlers(dispatch);\n\n  useEffect(() => {\n    const [dataOfMainTimeZone] = state.timeZonesData;\n    eventHandlers.handleTimeRangeChange(\n      dataOfMainTimeZone.timeRange.degreeValues\n    );\n  }, []);\n\n  return {\n    state,\n    eventHandlers\n  };\n}\n\nexport function useSliderPropsDeviceOptimized(\n  initialSliderProps: SliderProps,\n  isTarget24HourFormat: boolean,\n) {\n  const activeBreakpoint = useActiveBreakpoint();\n  const [sliderProps, setSliderProps] = useState({\n    marks: getClockMarksDeviceStyleOptimized(isTarget24HourFormat, activeBreakpoint),\n    ...initialSliderProps\n  });\n\n  useEffect(() => {\n    const newClockMarks = getClockMarksDeviceStyleOptimized(isTarget24HourFormat, activeBreakpoint);\n    const newStyleProps = getSliderStylePropsDeviceStyleOptimized(initialSliderProps, activeBreakpoint);\n    \n    setSliderProps({\n      marks: newClockMarks,\n      ...newStyleProps\n    });\n\n  }, [isTarget24HourFormat, activeBreakpoint, initialSliderProps]);\n\n  return sliderProps;\n}\n\nfunction timeRangeSelectorReducer(\n  state: T_TimeRangeSelectorState,\n  [type, payload]: T_TimeRangeSelectorAction\n): T_TimeRangeSelectorState {\n  switch (type) {\n    case E_TimeRangeSelectorActions.toggle24HourFormat: {\n      return {\n        ...state,\n        is24HourFormat: !state.is24HourFormat\n      };\n    }\n\n    case E_TimeRangeSelectorActions.setMainTimeZone: {\n      const newMainTimeZoneName = payload as string;\n      const mainTimeZoneData = state.timeZonesData.find(\n        (tzData) => tzData.timeZoneName === newMainTimeZoneName\n      );\n      const otherTimeZonesData = state.timeZonesData.filter(\n        (tzData) => tzData.timeZoneName !== newMainTimeZoneName\n      );\n\n      if (mainTimeZoneData) {\n        return {\n          ...state,\n          timeZonesData: [mainTimeZoneData, ...otherTimeZonesData]\n        };\n      }\n\n      return state;\n    }\n\n    case E_TimeRangeSelectorActions.setTimeRangeHandle: {\n      const mainTimeZoneDegreeValues = payload as T_Degree[];\n      const mainTimeZoneTimeValuesForDisplay =\n        convertDegreeValuesToTimeValuesForDisplay(\n          mainTimeZoneDegreeValues,\n          state.is24HourFormat\n        );\n      const [mainTimeZoneData] = state.timeZonesData;\n      const newTimeZonesData = state.timeZonesData.map((tzData, index) => {\n        const isTheMainTimeZone = index === 0;\n\n        if (isTheMainTimeZone) {\n          return {\n            ...tzData,\n            timeRange: {\n              degreeValues: mainTimeZoneDegreeValues,\n              timeValuesForDisplay: mainTimeZoneTimeValuesForDisplay\n            }\n          };\n        }\n\n        const mainTimeZoneDateTime = DateTime.local().setZone(\n          mainTimeZoneData.timeZoneName\n        );\n        const [\n          mainTimeZoneTimeValuesForDisplayFrom,\n          mainTimeZoneTimeValuesForDisplayTo\n        ] = mainTimeZoneTimeValuesForDisplay;\n        const targetTimeZoneDateTimeFrom = mainTimeZoneDateTime\n          .set({\n            hour: get24HourValue(\n              mainTimeZoneTimeValuesForDisplayFrom.hour,\n              mainTimeZoneTimeValuesForDisplayFrom.meridiem\n            ),\n            minute: toNumber(mainTimeZoneTimeValuesForDisplayFrom.minute)\n          })\n          .setZone(tzData.timeZoneName);\n        const targetTimeZoneDateTimeTo = mainTimeZoneDateTime\n          .set({\n            hour: get24HourValue(\n              mainTimeZoneTimeValuesForDisplayTo.hour,\n              mainTimeZoneTimeValuesForDisplayTo.meridiem\n            ),\n            minute: toNumber(mainTimeZoneTimeValuesForDisplayTo.minute)\n          })\n          .setZone(tzData.timeZoneName);\n        const degreeValues = convertDateTimeValuesToDegreeValues([\n          targetTimeZoneDateTimeFrom,\n          targetTimeZoneDateTimeTo\n        ]);\n        const timeValuesForDisplay = convertDegreeValuesToTimeValuesForDisplay(\n          degreeValues,\n          state.is24HourFormat\n        );\n\n        return {\n          ...tzData,\n          timeRange: {\n            degreeValues,\n            timeValuesForDisplay\n          }\n        };\n      });\n\n      return {\n        ...state,\n        timeZonesData: newTimeZonesData\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nimport { useSliderPropsDeviceOptimized, useTimeRangeSelector } from \"./hooks\";\nimport toolsTimeTimeZoneConstants from \"./constants\";\nimport { E_TimeRangeSelectorTimeZoneListItemActions } from \"./types\";\nimport { sliderStyleProps } from \"./styles\";\nimport \"./styles.scss\";\n\nfunction TimeZone() {\n  const { state, eventHandlers } = useTimeRangeSelector();\n  const sliderPropsDeviceOptimized = useSliderPropsDeviceOptimized(\n    sliderStyleProps,\n    state.is24HourFormat\n  );\n  const [dataOfMainTimeZone, ...dataOfOtherTimeZones] = state.timeZonesData;\n  const [mainTimeZoneTimeRangeFrom, mainTimeZoneTimeRangeTo] =\n    dataOfMainTimeZone.timeRange.timeValuesForDisplay;\n\n  return (\n    <div className=\"TimeZone h-screen container mx-auto w-full sm:w-11/12 md:w-10/12 lg:w-11/12 xl:w-10/12 2xl:w-8/12\">\n      <div className=\"grid grid-cols-1 gap-3 sm:gap-6 2xl:gap-8 mt-5 lg:mt-10\">\n        {/* Main timezone and slider */}\n        <div className=\"bg-white shadow-lg bg-gradient-to-t from-neutral-100 px-5 pt-3 sm:px-8 sm:pt-6 md:px-10 md:pt-8 pb-7 sm:pb-11 flex flex-col justify-center select-none\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-10\">\n            {/* Main timezone meta info */}\n            <div className=\"flex flex-col\">\n              <span className=\"font-semibold text-lg sm:text-2xl font-sans text-gray-500\">\n                {dataOfMainTimeZone.countryName}\n              </span>\n              <div className=\"text-gray-500 tracking-wide flex flex-col\">\n                <span className=\"text-sm sm:text-base\">{dataOfMainTimeZone.offsetNameLong}</span>\n                <span className=\"font-mono text-xs sm:text-sm\">{dataOfMainTimeZone.offsetNameShort}</span>\n              </div>\n            </div>\n            {/* Main timezone selected time range */}\n            <div className=\"my-2 m-auto sm:m-0 text-lg sm:text-3xl text-gray-600 tracking-wide\">\n              <span className=\"bg-emerald-100 p-3 rounded-xl shadow-lg\">\n                {mainTimeZoneTimeRangeFrom.hour}:\n                {mainTimeZoneTimeRangeFrom.minute}&nbsp;\n                <span className=\"text-xs sm:text-base opacity-70\">\n                  {mainTimeZoneTimeRangeFrom.meridiem}\n                </span>\n              </span>\n              <span className=\"text-gray-400\">&nbsp;&nbsp;–&nbsp;&nbsp;</span>\n              <span className=\"bg-red-100 p-3 rounded-xl shadow-lg\">\n                {mainTimeZoneTimeRangeTo.hour}:{mainTimeZoneTimeRangeTo.minute}\n                &nbsp;\n                <span className=\"text-xs sm:text-base opacity-70\">\n                  {mainTimeZoneTimeRangeTo.meridiem}\n                </span>\n              </span>\n            </div>\n          </div>\n          {/* Time range slider */}\n          <div className=\"mt-7 sm:mt-10\">\n            <Slider\n              range\n              min={toolsTimeTimeZoneConstants.clockMarkDegreeRange.min}\n              max={toolsTimeTimeZoneConstants.clockMarkDegreeRange.max}\n              step={15}\n              value={dataOfMainTimeZone.timeRange.degreeValues}\n              pushable={15}\n              onChange={eventHandlers.handleTimeRangeChange}\n              draggableTrack\n              {...sliderPropsDeviceOptimized}\n            />\n          </div>\n        </div>\n        {/* Other (favorite) timezones list */}\n        <div className=\"m-auto w-11/12 sm:w-full grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-5 xl:gap-7 px-5 py-3 md:p-4 rounded-lg\">\n          {dataOfOtherTimeZones.map((tzData) => {\n            const [timeRangeFrom, timeRangeTo] =\n              tzData.timeRange.timeValuesForDisplay;\n            return (\n              <div\n                className=\"rounded-lg bg-white shadow-lg shadow-neutral-300\"\n                key={tzData.timeZoneName}\n              >\n                <div className=\"flex flex-col\">\n                  {/* Time Zone meta */}\n                  <div className=\"px-5 py-3 sm:py-0 flex flex-col text-gray-500 tracking-wide sm:h-24 justify-center\">\n                    <div className=\"font-bold text-sm sm:text-base\">\n                      {tzData.countryName}\n                    </div>\n                    <div className=\"text-gray-500 sm:mt-1 flex flex-col\">\n                      <span className=\"text-xs sm:text-sm\">{tzData.offsetNameLong}</span>\n                      <span className=\"font-mono text-2xs sm:text-xs\">{tzData.offsetNameShort}</span>\n                    </div>\n                  </div>\n                  {/* Time range */}\n                  <div className=\"-mb-2 py-4 sm:py-7 text-center text-md sm:text-xl text-gray-600 tracking-wide bg-slate-100\">\n                    <span className=\"bg-emerald-100 p-2 sm:p-3 rounded-lg shadow-lg\">\n                      {timeRangeFrom.hour}:{timeRangeFrom.minute}&nbsp;\n                      <span className=\"text-2xs sm:text-xs opacity-70\">\n                        {timeRangeFrom.meridiem}\n                      </span>\n                    </span>\n                    <span className=\"text-gray-400\">\n                      &nbsp;&nbsp;–&nbsp;&nbsp;\n                    </span>\n                    <span className=\"bg-red-100 p-2 sm:p-3 rounded-lg shadow-lg\">\n                      {timeRangeTo.hour}:{timeRangeTo.minute}&nbsp;\n                      <span className=\"text-2xs sm:text-xs opacity-70\">\n                        {timeRangeTo.meridiem}\n                      </span>\n                    </span>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-10 mt-2\">\n                  {[\n                    E_TimeRangeSelectorTimeZoneListItemActions.setAsMain,\n                    E_TimeRangeSelectorTimeZoneListItemActions.change,\n                    E_TimeRangeSelectorTimeZoneListItemActions.remove\n                  ].map((btnName) => (\n                    <button\n                      key={btnName}\n                      className=\"favItemActionBtn\"\n                      data-time-zone-name={tzData.timeZoneName}\n                      data-action-name={btnName}\n                      onClick={eventHandlers.handleTimeZoneListItemAction}\n                    >\n                      {btnName}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TimeZone;\n","const handleCommonStyle = {\n  borderTopRightRadius: \"20%\",\n  borderTopLeftRadius: \"20%\",\n  borderBottomRightRadius: \"100%\",\n  borderBottomLeftRadius: \"100%\",\n  borderWidth: 3,\n  height: 25,\n  width: 13,\n  marginTop: -16\n};\nconst dotTrackRailHeight = 20;\n\nexport const sliderStyleProps = {\n  handleStyle: [\n    {\n      ...handleCommonStyle,\n      borderColor: \"#01527E\",\n      backgroundColor: \"#3FBF3F\"\n    },\n    {\n      ...handleCommonStyle,\n      borderColor: \"#01527E\",\n      backgroundColor: \"#FE473E\"\n    }\n  ],\n  dotStyle: {\n    height: dotTrackRailHeight,\n    width: 1,\n    borderRadius: 0,\n    borderColor: \"#ddd\"\n  },\n  trackStyle: {\n    marginTop: -14,\n    height: dotTrackRailHeight,\n    borderRadius: 0,\n    backgroundColor: \"#58B5FD\"\n  },\n  railStyle: {\n    borderRadius: 0,\n    marginTop: -14,\n    height: dotTrackRailHeight,\n    backgroundColor: \"#eee\"\n  }\n};\n","import { T_ClockDataOfTimeZone } from \"shared/helpers/timeZone/types\";\nimport { T_Nullable } from \"shared/types/generics\";\n\nexport enum E_Meridiem {\n  AM = \"AM\",\n  PM = \"PM\"\n};\n\nexport type T_Degree = number;\n\nexport type T_HourOrMinute = number;\n\nexport type T_Time24HrsFormat = {\n  hour: T_HourOrMinute;\n  minute: T_HourOrMinute;\n};\n\nexport type T_TimeForDisplay = {\n  hour: string;\n  minute: string;\n  meridiem?: T_Nullable<E_Meridiem>;\n};\n\nexport type T_TimeRangeDegreeValues = T_Degree[];\n\nexport type T_TimeRangeTimeValuesForDisplay = T_TimeForDisplay[];\n\nexport interface T_TimeRange {\n  degreeValues: T_TimeRangeDegreeValues;\n  timeValuesForDisplay: T_TimeRangeTimeValuesForDisplay;\n}\n\nexport type T_ClockDataOfTimeZoneWithTimeRange = T_ClockDataOfTimeZone & {\n  timeRange: T_TimeRange;\n}\n\nexport type T_TimeRangeSelectorState = {\n  timeZonesData: T_ClockDataOfTimeZoneWithTimeRange[];\n  is24HourFormat: boolean;\n};\n\nexport enum E_TimeRangeSelectorTimeZoneListItemActions {\n  setAsMain = \"SET AS MAIN\",\n  change = \"CHANGE\",\n  remove = \"REMOVE\",\n}\n\nexport enum E_TimeRangeSelectorActions {\n  setTimeRangeHandle,\n  toggle24HourFormat,\n  setMainTimeZone,\n  changeTimeZone,\n  removeTimeZone\n}\n\nexport type T_TimeRangeSelectorAction = [\n  type: E_TimeRangeSelectorActions,\n  payload?: any\n];\n\nexport interface T_TimeRangeSelectorClockMarksMap {\n  [x: T_Degree | string]: T_HourOrMinute;\n};\n","export function toNumber(x: any) {\n  return +x;\n}\n\nexport function round(num: number | string, fractionDigits: number = 2) {\n  return toNumber(toNumber(num).toFixed(fractionDigits));\n}\n","import { DateTime } from \"luxon\";\nimport worldCountries from \"shared/constants/worldCountries\";\nimport { T_ClockDataOfTimeZone } from \"./types\";\n\nexport function getClocksDataOfLocalAndOtherTimeZones(otherTimeZones?: string[]) {\n  const now = DateTime.now();\n  const clocksData = [getClockDataOfTimeZone(now)];\n  if (otherTimeZones) {\n    clocksData.push(\n      ...otherTimeZones.map((tz) => getClockDataOfTimeZone(now, tz))\n    );\n  }\n  return clocksData;\n}\n\nexport function getClockDataOfTimeZone(\n  datetime: DateTime,\n  timeZone?: string\n): T_ClockDataOfTimeZone {\n  const nowInTimeZone = timeZone ? datetime.setZone(timeZone) : datetime;\n  const {\n    // timeZone\n    zoneName,\n    offsetNameLong,\n    offsetNameShort,\n    // time\n    hour,\n    minute,\n    second,\n    isInDST,\n    // date\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort\n  } = nowInTimeZone;\n\n  const timeZoneName = standardizeTimeZoneName(zoneName);\n  const meridiem = nowInTimeZone.toFormat(\"a\");\n  const countryInfo = worldCountries.find(\n    (info) => info.timeZone === timeZoneName\n  ) || {\n    countryCode: \"\",\n    countryName: \"\"\n  };\n\n  return {\n    timeISOString: datetime.toISO(),\n    isLocal: !timeZone,\n    timeZoneName,\n    offsetNameLong,\n    offsetNameShort,\n    ...countryInfo,\n    hour: nowInTimeZone.toFormat(\"hh\"),\n    minute: nowInTimeZone.toFormat(\"mm\"),\n    second: nowInTimeZone.toFormat(\"ss\"),\n    meridiem,\n    isInDST,\n    year,\n    monthShort,\n    monthLong,\n    day,\n    weekdayLong,\n    weekdayShort,\n    hourDeg: (hour / 12) * 360 + (minute / 60) * 30 + 90,\n    minuteDeg: (minute / 60) * 360 + (second / 60) * 6 + 90,\n    secondDeg: (second / 60) * 360 + 90\n  };\n}\n\nexport const localTimeZoneName = standardizeTimeZoneName(DateTime.now().zoneName);\n\nexport function standardizeTimeZoneName(timeZoneName: string) {\n  return timeZoneName.replace(\n    // TODO: Stupid Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=580195\n    \"Calcutta\",\n    \"Kolkata\"\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["toolsTimeTimeZoneConstants","degreePerClockMark","clockMarkCount","clockTimeDelimiter","clockMarkDegreeRange","min","max","get12HourValue","value","twelveHourValue","getMeridiemFrom24HourValue","E_Meridiem","get24HourValue","meridiem","numericValue","toNumber","getTimeFromDegreeForDisplay","degree","isTarget24HourFormat","hour","minute","time","String","padStart","getTimeForDisplay","getDegreeFromTime","getClockMarksDeviceStyleOptimized","activeBreakpoint","clockMarks","index","key","label","E_Breakpoint","style","fontSize","marginTop","getSliderStylePropsDeviceStyleOptimized","sliderProps","handleStyle","dotStyle","trackStyle","railStyle","newSliderProps","borderWidth","width","height","Array","isArray","convertDegreeValuesToTimeValuesForDisplay","degreeValues","map","convertDateTimeValuesToDegreeValues","dateTimeValues","toString","convertTimeValuesToDegreeValues","timeValues","getDegreeValuesWithoutOverflow","from","to","maxLimitedTo","clocksData","getClocksDataOfLocalAndOtherTimeZones","filter","tz","localTimeZoneName","clocksDataOfMainTimeZone","initialState","timeZonesData","clock","nextHourValue","nextNextHourValue","degreeValuesWithoutOverflow","timeValuesForDisplay","timeRange","is24HourFormat","getTimeRangeSelectorEventHandlers","dispatch","handle24HourFormatToggle","E_TimeRangeSelectorActions","handleTimeRangeChange","handleTimeZoneListItemAction","event","currentTarget","dataset","timeZoneName","actionName","E_TimeRangeSelectorTimeZoneListItemActions","useTimeRangeSelector","useReducer","timeRangeSelectorReducer","state","eventHandlers","useEffect","dataOfMainTimeZone","useSliderPropsDeviceOptimized","initialSliderProps","useActiveBreakpoint","useState","marks","setSliderProps","newClockMarks","newStyleProps","type","payload","newMainTimeZoneName","mainTimeZoneData","find","tzData","otherTimeZonesData","mainTimeZoneDegreeValues","mainTimeZoneTimeValuesForDisplay","newTimeZonesData","mainTimeZoneDateTime","DateTime","setZone","mainTimeZoneTimeValuesForDisplayFrom","mainTimeZoneTimeValuesForDisplayTo","targetTimeZoneDateTimeFrom","set","targetTimeZoneDateTimeTo","sliderPropsDeviceOptimized","sliderStyleProps","dataOfOtherTimeZones","mainTimeZoneTimeRangeFrom","mainTimeZoneTimeRangeTo","className","countryName","offsetNameLong","offsetNameShort","range","step","pushable","onChange","draggableTrack","timeRangeFrom","timeRangeTo","btnName","onClick","handleCommonStyle","borderTopRightRadius","borderTopLeftRadius","borderBottomRightRadius","borderBottomLeftRadius","borderColor","backgroundColor","borderRadius","x","round","num","fractionDigits","toFixed","otherTimeZones","now","getClockDataOfTimeZone","push","datetime","timeZone","nowInTimeZone","zoneName","second","isInDST","year","monthShort","monthLong","day","weekdayLong","weekdayShort","standardizeTimeZoneName","toFormat","countryInfo","worldCountries","info","countryCode","timeISOString","toISO","isLocal","hourDeg","minuteDeg","secondDeg","replace"],"sourceRoot":""}