{"version":3,"file":"static/js/7849.f19db300.chunk.js","mappings":"iNAOe,SAASA,EAAYC,GAIhC,IAAD,MACKC,EAAKD,EAAMC,KAAOC,EAAoB,EAAIF,EAAMC,GAChDE,EAAKH,EAAMG,KAAOC,EAAe,EAAIJ,EAAMG,GAC3CE,EAAKL,EAAMK,KAAOC,EAAe,EAAIN,EAAMK,GAC3CE,EAAwBN,EAAKO,EAC7BC,EAAwBN,EAAKO,EAC7BC,EAAwBN,EAAKO,EAE7BC,GAAQC,EAAAA,EAAAA,QAAuB,MAC/BC,GAAQD,EAAAA,EAAAA,QAAuB,MAC/BE,GAAQF,EAAAA,EAAAA,QAAuB,MAyBrC,OAvBA,UAAAD,EAAMI,eAAN,SAAeC,QACb,CAEE,CAAEC,UAAU,UAAD,OAAY,IAAMZ,EAAlB,QAA+Ca,OAAQ,IAEpE,CAAEC,SAAU,MAAOC,WAAYC,IAAUC,OAAQ,SAAUC,MAAO,IAEpE,UAAAV,EAAME,eAAN,SAAeC,QACb,CAEE,CAAEC,UAAU,UAAD,OAAY,IAAMV,EAAlB,QAA+CW,OAAQ,IAGpE,CAAEC,SAAU,KAAMC,WAAYC,IAAUC,OAAQ,SAAUC,MAAO,IAEnE,UAAAT,EAAMC,eAAN,SAAeC,QACb,CAEE,CAAEC,UAAU,UAAD,OAAY,IAAMR,EAAlB,QAA+CS,OAAQ,IAGpE,CAAEC,SAAU,GAAIC,WAAYC,IAAUC,OAAQ,SAAUC,MAAO,KAG/D,gBAAKC,UAAU,cAAf,UACE,iBAAKC,GAAG,QAAR,WACE,gBAAKD,UAAU,gBACf,eAAIA,UAAU,eAAd,SACGE,EAAoBC,EAAkB,CAAEC,kBAAkB,OAG7D,eAAIJ,UAAU,SAAd,SACGE,EAAoBG,EAAY,CAAEC,kBAAkB,OAEvD,gBACEC,IAAKpB,EACLa,UAAU,gBAGZ,gBACEO,IAAKlB,EACLW,UAAU,kBAGZ,gBACEO,IAAKjB,EACLU,UAAU,qBAMnB,CA4BD,SAASE,EAAoBM,EAAWC,GACtC,OAAO,OAAIC,MAAMF,IAAIG,KAAI,SAACC,EAAGC,GAC3B,IAAIC,EAAiCD,EAWrC,OAVA,OAAIJ,QAAJ,IAAIA,GAAAA,EAASH,mBACXQ,EAAgBD,EAAQ,GAE1B,OAAIJ,QAAJ,IAAIA,GAAAA,EAASM,eACXD,EAAgBE,OAAOF,GAAeG,SAAS,EAAG,MAEpD,OAAIR,QAAJ,IAAIA,GAAAA,EAASL,mBACXU,EAAgB,KAGX,wBAAiBA,GAARD,EACjB,GACF,CAED,IAAMjC,EAAe,GACfF,EAAe,GACf2B,EAAa,GACb7B,EAAoB,GACpB2B,EAAmB,GACnBnB,EAAoB,EACpBE,EAAoB,EACpBJ,EAAkB,E,+BC9HxB,WAAiB,C","sources":["shared/components/analogClock/index.tsx","webpack://mysite-dev/./src/shared/components/analogClock/styles.scss?0270"],"sourcesContent":["import React, { useRef } from \"react\";\n\nimport { arrayRearrange } from \"shared/helpers/dataStructure\";\nimport { toNumber } from \"shared/helpers/number\";\nimport { T_ListItemMarkupOptions } from \"./types\";\nimport \"./styles.scss\";\n\nexport default function AnalogClock(props: {\n  hh: number;\n  mm: number;\n  ss: number;\n}) {\n  const hh = props.hh === totalDigitalHours ? 0 : props.hh;\n  const mm = props.mm === totalMinutes ? 0 : props.mm;\n  const ss = props.ss === totalSeconds ? 0 : props.ss;\n  const hhHandInitialRotation = hh * perHourRotation;\n  const mmHandInitialRotation = mm * perMinuteRotation;\n  const ssHandInitialRotation = ss * perSecondRotation;\n\n  const hhRef = useRef<HTMLDivElement>(null);\n  const mmRef = useRef<HTMLDivElement>(null);\n  const ssRef = useRef<HTMLDivElement>(null);\n\n  hhRef.current?.animate(\n    [\n      // { transform: `rotate(${hhHandInitialRotation}deg)`, offset: 0 },\n      { transform: `rotate(${360 + hhHandInitialRotation}deg)`, offset: 1 }\n    ],\n    { duration: 43200, iterations: Infinity, easing: \"linear\", delay: 0 }\n  );\n  mmRef.current?.animate(\n    [\n      // { transform: `rotate(${mmHandInitialRotation}deg)`, offset: 0 },\n      { transform: `rotate(${360 + mmHandInitialRotation}deg)`, offset: 1 }\n    ],\n    // options\n    { duration: 3600, iterations: Infinity, easing: \"linear\", delay: 0 }\n  );\n  ssRef.current?.animate(\n    [\n      // { transform: `rotate(${ssHandInitialRotation}deg)`, offset: 0 },\n      { transform: `rotate(${360 + ssHandInitialRotation}deg)`, offset: 1 }\n    ],\n    // options\n    { duration: 60, iterations: Infinity, easing: \"linear\", delay: 0 }\n  );\n  return (\n    <div className=\"AnalogClock\">\n      <div id=\"watch\">\n        <div className=\"frame-face\"></div>\n        <ul className=\"minute-marks\">\n          {getNListItemsMarkup(totalMinutesMark, { doNotRenderIndex: true })}\n        </ul>\n        {/* {getDigitalClockMarkup(hh, mm, ss)} */}\n        <ul className=\"digits\">\n          {getNListItemsMarkup(totalHours, { naturalNumbering: true })}\n        </ul>\n        <div\n          ref={hhRef}\n          className=\"hours-hand\"\n          // style={{ transform: `rotate(${hhHandInitialRotation}deg)` }}\n        />\n        <div\n          ref={mmRef}\n          className=\"minutes-hand\"\n          // style={{ transform: `rotate(${mmHandInitialRotation}deg)` }}\n        />\n        <div\n          ref={ssRef}\n          className=\"seconds-hand\"\n          // style={{ transform: `rotate(${ssHandInitialRotation}deg)` }}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction getDigitalClockMarkup(hh: number, mm: number, ss: number) {\n  const hhItems = arrayRearrange(\n    getNListItemsMarkup(totalDigitalHours, {\n      zeroPadIndex: true\n    }),\n    toNumber(hh)\n  );\n\n  const mmItems = arrayRearrange(\n    getNListItemsMarkup(totalMinutes, { zeroPadIndex: true }),\n    toNumber(mm)\n  );\n  const ssItems = arrayRearrange(\n    getNListItemsMarkup(totalSeconds, { zeroPadIndex: true }),\n    toNumber(ss)\n  );\n\n  return (\n    <div className=\"digital-wrap\">\n      <ul className=\"digit-hours\">{hhItems}</ul>\n      <ul className=\"digit-minutes\">{mmItems}</ul>\n      <ul className=\"digit-seconds\">{ssItems}</ul>\n    </div>\n  );\n}\n\nfunction getNListItemsMarkup(n: number, options?: T_ListItemMarkupOptions) {\n  return [...Array(n)].map((e, index) => {\n    let valueToRender: string | number = index;\n    if (options?.naturalNumbering) {\n      valueToRender = index + 1;\n    }\n    if (options?.zeroPadIndex) {\n      valueToRender = String(valueToRender).padStart(2, \"0\");\n    }\n    if (options?.doNotRenderIndex) {\n      valueToRender = \"\";\n    }\n\n    return <li key={index}>{valueToRender}</li>;\n  });\n}\n\nconst totalSeconds = 60;\nconst totalMinutes = 60;\nconst totalHours = 12;\nconst totalDigitalHours = 24;\nconst totalMinutesMark = 48; // 60 - <count where the actual digits are displayed instead of marks>\nconst perMinuteRotation = 360 / 60;\nconst perSecondRotation = 360 / 60;\nconst perHourRotation = 360 / 12;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["AnalogClock","props","hh","totalDigitalHours","mm","totalMinutes","ss","totalSeconds","hhHandInitialRotation","perHourRotation","mmHandInitialRotation","perMinuteRotation","ssHandInitialRotation","perSecondRotation","hhRef","useRef","mmRef","ssRef","current","animate","transform","offset","duration","iterations","Infinity","easing","delay","className","id","getNListItemsMarkup","totalMinutesMark","doNotRenderIndex","totalHours","naturalNumbering","ref","n","options","Array","map","e","index","valueToRender","zeroPadIndex","String","padStart"],"sourceRoot":""}