{"version":3,"file":"static/js/5075.5ea6d688.chunk.js","mappings":"mKAEe,MAAMA,EAInBC,WAAAA,CAAYC,GAAmB,IAADC,EAAA,UAH9BC,eAAS,OACTC,WAAuB,GAAG,KAUnBC,IAAM,SAACC,GAAyC,IAA5BC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACrC,MAAMG,EAAUT,EAAKU,WAAWN,GAChCO,EAAAA,aAAaC,QAAQH,EAASI,KAAKC,UAAUT,IAC7CL,EAAKE,WAAWa,KAAKX,EACvB,EAAE,KAEKY,IAAeZ,IAAgC,IAADa,EACnD,MAAMR,EAAUS,KAAKR,WAAWN,GAChC,OAAOS,KAAKM,MAAmC,QAA9BF,EAACN,EAAAA,aAAaS,QAAQX,UAAQ,IAAAQ,EAAAA,EAAI,OAAO,EAC1D,KAEKI,OAAUjB,IACf,MAAMK,EAAUS,KAAKR,WAAWN,GAChCO,EAAAA,aAAaW,WAAWb,GACxBS,KAAKhB,WAAagB,KAAKhB,WAAWqB,QAAQC,GAAMA,IAAMpB,GAAI,EAC1D,KAEKqB,SAAW,KAChBP,KAAKhB,WAAWwB,SAAStB,GAAQc,KAAKG,OAAOjB,KAC7Cc,KAAKhB,WAAa,EAAE,EA1BpBgB,KAAKjB,UAAYF,CACnB,CAEQW,UAAAA,CAAWN,GACjB,MAAO,GAAGc,KAAKjB,aAAaG,GAC9B,E,kBCZK,SAASuB,EAAmBC,GACjC,IACE,MAAMC,EAAWC,OAAkCF,GAC7CG,EAAU,mBAKhB,OAHAF,EAAQjB,QAAQmB,EAAS,KACzBF,EAAQP,WAAWS,IAEZ,CACT,CAAE,MAAOC,GACP,OAAO,CACT,CACF,C,qGAGO,MAAMC,EAAcnC,WAAAA,GAAA,KAClB+B,QAAmC,CAAC,EAAE,KAEtCjB,QAAU,CAACR,EAAaC,KAC7B,MAAM6B,EAAQ7B,GAAQA,EAAK8B,YAAe,GAE1CjB,KAAKW,QAAQzB,GAAO8B,CAAI,EACxB,KAEKd,QAAWhB,GAA+Bc,KAAKW,QAAQzB,IAAQ,GAAG,KAElEkB,WAAclB,WACZc,KAAKW,QAAQzB,EAAI,EACxB,KAEKgC,MAAQ,KACblB,KAAKW,SAAU,IAAII,GAAgBJ,OAAO,CAC1C,EAGG,MAAMlB,EAAegB,EAAmB,gBAC3CG,OAAOO,aACP,IAAIJ,EAEKK,EAAiBX,EAAmB,kBAC7CG,OAAOS,eACP,IAAIN,C","sources":["shared/helpers/pageCache.ts","shared/helpers/webStorage.ts"],"sourcesContent":["import { LocalStorage } from \"shared/helpers/webStorage\";\r\n\r\nexport default class PageCache {\r\n  keyPrefix: string;\r\n  cachedKeys: string[] = [];\r\n\r\n  constructor(pathname: string) {\r\n    this.keyPrefix = pathname;\r\n  }\r\n\r\n  private getPageKey(key: string) {\r\n    return `${this.keyPrefix}-${key}`;\r\n  }\r\n\r\n  public set = (key: string, data: any = null): void => {\r\n    const pageKey = this.getPageKey(key);\r\n    LocalStorage.setItem(pageKey, JSON.stringify(data));\r\n    this.cachedKeys.push(key);\r\n  };\r\n\r\n  public get = <Result>(key: string): Result | null => {\r\n    const pageKey = this.getPageKey(key);\r\n    return JSON.parse(LocalStorage.getItem(pageKey) ?? \"null\");\r\n  };\r\n\r\n  public remove = (key: string): void => {\r\n    const pageKey = this.getPageKey(key);\r\n    LocalStorage.removeItem(pageKey);\r\n    this.cachedKeys = this.cachedKeys.filter((k) => k !== key);\r\n  };\r\n\r\n  public clearAll = () => {\r\n    this.cachedKeys.forEach((key) => this.remove(key));\r\n    this.cachedKeys = [];\r\n  };\r\n}\r\n","export function isStorageSupported(type: string): boolean {\r\n  try {\r\n    const storage = (window as { [key: string]: any })[type];\r\n    const testKey = \"__storage_test__\";\r\n\r\n    storage.setItem(testKey, \"1\");\r\n    storage.removeItem(testKey);\r\n\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Wrapper class for storage\r\nexport class MemoryStorage {\r\n  public storage: { [x: string]: string } = {};\r\n\r\n  public setItem = (key: string, data: string): void => {\r\n    const json = (data && data.toString()) || \"\";\r\n\r\n    this.storage[key] = json;\r\n  };\r\n\r\n  public getItem = (key: string): string | null => this.storage[key] || \"\";\r\n\r\n  public removeItem = (key: string): void => {\r\n    delete this.storage[key];\r\n  };\r\n\r\n  public clear = () => {\r\n    this.storage = new MemoryStorage().storage;\r\n  };\r\n}\r\n\r\nexport const LocalStorage = isStorageSupported(\"localStorage\")\r\n  ? window.localStorage\r\n  : new MemoryStorage();\r\n\r\nexport const SessionStorage = isStorageSupported(\"sessionStorage\")\r\n  ? window.sessionStorage\r\n  : new MemoryStorage();\r\n"],"names":["PageCache","constructor","pathname","_this","keyPrefix","cachedKeys","set","key","data","arguments","length","undefined","pageKey","getPageKey","LocalStorage","setItem","JSON","stringify","push","get","_LocalStorage$getItem","this","parse","getItem","remove","removeItem","filter","k","clearAll","forEach","isStorageSupported","type","storage","window","testKey","error","MemoryStorage","json","toString","clear","localStorage","SessionStorage","sessionStorage"],"sourceRoot":""}