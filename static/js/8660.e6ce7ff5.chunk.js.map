{"version":3,"file":"static/js/8660.e6ce7ff5.chunk.js","mappings":"+GAQO,SAASA,EACdC,EACAC,GAEA,MAAO,CACLC,GAAKF,EAAUE,GAAKD,EAAa,GAAMA,EACvCE,GAAKH,EAAUG,GAAKF,EAAa,GAAMA,EAE1C,CAGM,SAASG,EAAkBC,GAChC,IAAMC,EAAQ,CAAEJ,EAAG,EAAGC,EAAG,GAUzB,OAkCF,SAAsBE,GACpB,QAAQ,OAACA,QAAD,IAACA,IAAAA,EAAOE,cACjB,CA5CKC,CAAaH,IAIfC,EAAMJ,EAAIG,EAAMI,QAChBH,EAAMH,EAAIE,EAAMK,UAJhBJ,EAAMJ,EAAIG,EAAME,cAAc,GAAGE,QACjCH,EAAMH,EAAIE,EAAME,cAAc,GAAGG,SAM5BJ,CACR,CAEM,SAASK,EACdC,GAEA,GAAIA,EAAOC,QACT,MAAO,CACLX,EAAGU,EAAOC,QAAQC,wBAAwBC,MAAQ,EAClDZ,EAAGS,EAAOC,QAAQC,wBAAwBE,OAAS,EAGxD,CAEM,SAASC,EACdC,EACAN,GAEA,GAAIA,EAAOC,QACT,OAAOK,EAAeH,MAAQH,EAAOC,QAAQC,wBAAwBC,KAExE,CAEM,SAASI,EAAyBC,GACvC,IAAMC,EAAUC,SAASC,iBAAiBH,EAASlB,EAAGkB,EAASjB,GAE/D,GAAIkB,EAAS,CAAC,IAAD,EACLG,EAAWH,EAAgBI,SAAWJ,EAC5C,iBAAOG,EAAQE,aAAf,QAAwBF,EAAQG,EACjC,CAED,MAAO,EACR,C","sources":["pages/blogs/travel/worldmap/helpers.ts"],"sourcesContent":["import React from \"react\";\n\nimport {\n  T_Coordinates,\n  T_SVGEventType,\n  T_ViewBoxProps\n} from \"pages/blogs/travel/worldmap/types\";\n\nexport function getCompensatoryTranslationForZoom(\n  zoomPoint: T_Coordinates,\n  zoomFactor: number\n): T_Coordinates {\n  return {\n    x: -(zoomPoint.x * (zoomFactor - 1)) / zoomFactor,\n    y: -(zoomPoint.y * (zoomFactor - 1)) / zoomFactor\n  };\n}\n\n// This function returns an object with X & Y values from the pointer event\nexport function getPointFromEvent(event: T_SVGEventType): T_Coordinates {\n  const point = { x: 0, y: 0 };\n  // If event is triggered by a touch event, we get the position of the first finger\n  if (isTouchEvent(event)) {\n    point.x = event.targetTouches[0].clientX;\n    point.y = event.targetTouches[0].clientY;\n  } else {\n    point.x = event.clientX;\n    point.y = event.clientY;\n  }\n\n  return point;\n}\n\nexport function getElementRectMidPoint(\n  svgRef: React.RefObject<SVGSVGElement>\n): T_Coordinates | void {\n  if (svgRef.current) {\n    return {\n      x: svgRef.current.getBoundingClientRect().width / 2,\n      y: svgRef.current.getBoundingClientRect().height / 2\n    };\n  }\n}\n\nexport function getWidthRatio(\n  initialViewBox: T_ViewBoxProps,\n  svgRef: React.RefObject<SVGSVGElement>\n): number | void {\n  if (svgRef.current) {\n    return initialViewBox.width / svgRef.current.getBoundingClientRect().width;\n  }\n}\n\nexport function getElementTitleFromPoint(position: T_Coordinates): string {\n  const element = document.elementFromPoint(position.x, position.y);\n\n  if (element) {\n    const dataObj = (element as any).dataset || element;\n    return dataObj.title ?? dataObj.id;\n  }\n\n  return \"\";\n}\n\nfunction isTouchEvent(event: any): event is React.TouchEvent<SVGSVGElement> {\n  return !!event?.targetTouches;\n}\n"],"names":["getCompensatoryTranslationForZoom","zoomPoint","zoomFactor","x","y","getPointFromEvent","event","point","targetTouches","isTouchEvent","clientX","clientY","getElementRectMidPoint","svgRef","current","getBoundingClientRect","width","height","getWidthRatio","initialViewBox","getElementTitleFromPoint","position","element","document","elementFromPoint","dataObj","dataset","title","id"],"sourceRoot":""}