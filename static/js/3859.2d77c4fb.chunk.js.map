{"version":3,"file":"static/js/3859.2d77c4fb.chunk.js","mappings":"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","sources":["pages/tools/money/forex/api.ts","pages/tools/money/forex/helpers.ts","shared/helpers/request.ts","shared/helpers/time.ts","shared/helpers/webStorage.ts"],"sourcesContent":["import appConstants from \"shared/constants/app\";\r\nimport { getTimestamp } from \"shared/helpers/time\";\r\nimport { LocalStorage } from \"shared/helpers/webStorage\";\r\nimport request, { T_HTTPMethod } from \"shared/helpers/request\";\r\nimport {\r\n  mapForexRateResponse,\r\n  T_ForexData,\r\n  T_ForexResponse\r\n} from \"./helpers\";\r\n\r\nexport async function fetchForexData() {\r\n  let result: T_ForexData | null = JSON.parse(\r\n    LocalStorage.getItem(appConstants.webStorage.forexData) ?? \"null\"\r\n  );\r\n\r\n  // Make the API call only when necessary\r\n  if (\r\n    !result || // if there is no cached data yet\r\n    getTimestamp() > result.timeNextUpdate // // OR if cached data is expired\r\n  ) {\r\n    const response = await request<T_ForexResponse>({\r\n      method: T_HTTPMethod.GET,\r\n      endpoint: appConstants.API.forex\r\n    });\r\n    if (response.result) {\r\n      result = mapForexRateResponse(response.result);\r\n      // Update cache with latest data\r\n      LocalStorage.setItem(\r\n        appConstants.webStorage.forexData,\r\n        JSON.stringify(result)\r\n      );\r\n    }\r\n  }\r\n\r\n  return result?.conversionRates;\r\n}\r\n","import { T_ConversionRates } from \"shared/components/unitConverter/types\";\r\n\r\nexport function mapForexRateResponse(response: T_ForexResponse) {\r\n  return {\r\n    baseCode: response.base_code,\r\n    conversionRates: response.conversion_rates,\r\n    timeLastUpdate: response.time_last_update_unix,\r\n    timeNextUpdate: response.time_next_update_unix\r\n  };\r\n}\r\n\r\n/**\r\n * Types\r\n */\r\nexport interface T_ForexResponse {\r\n  conversion_rates: T_ConversionRates;\r\n  base_code: string;\r\n  time_last_update_unix: number;\r\n  time_last_update_utc: string;\r\n  time_next_update_unix: number;\r\n  time_next_update_utc: string;\r\n}\r\n\r\nexport type T_ForexData = ReturnType<typeof mapForexRateResponse>;\r\n","export const enum T_HTTPMethod {\r\n  GET = \"GET\",\r\n  POST = \"POST\",\r\n  PUT = \"PUT\",\r\n  PATCH = \"PATCH\",\r\n  DELETE = \"DELETE\"\r\n}\r\n\r\ninterface T_RequestOptions {\r\n  method: T_HTTPMethod;\r\n  endpoint: string;\r\n  params?: { [key: string]: any };\r\n  headers?: HeadersInit;\r\n  body?: any;\r\n  rawBody?: BodyInit | null;\r\n}\r\n\r\nexport const getQueryParams = (params: { [key: string]: string }): string =>\r\n  Object.keys(params)\r\n    .filter(\r\n      (k) =>\r\n        typeof params[k] !== \"undefined\" &&\r\n        params[k] !== null &&\r\n        params[k] !== \"\"\r\n    ) // removes if empty, but accepts \"0\"\r\n    .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\r\n    .join(\"&\");\r\n\r\nexport default async function request<T>({\r\n  method,\r\n  endpoint,\r\n  params,\r\n  headers,\r\n  body,\r\n  rawBody\r\n}: T_RequestOptions): Promise<{\r\n  result?: T;\r\n  error?: unknown;\r\n}> {\r\n  let url = endpoint;\r\n  if (params) {\r\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + getQueryParams(params);\r\n  }\r\n\r\n  const fetchOptions: RequestInit = {\r\n    headers,\r\n    method,\r\n    credentials: \"same-origin\",\r\n    mode: \"cors\"\r\n  };\r\n  if (method !== T_HTTPMethod.GET && (rawBody || body)) {\r\n    fetchOptions.body = rawBody || JSON.stringify(body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, fetchOptions);\r\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\r\n    let result: T;\r\n\r\n    if (contentType.includes(\"application/json\")) {\r\n      result = await response.json();\r\n    } else {\r\n      result = response as unknown as T;\r\n    }\r\n\r\n    if (response.status >= 400) {\r\n      throw result || (await response.text());\r\n    }\r\n\r\n    return { result };\r\n  } catch (error) {\r\n    return { error: error instanceof Error ? error.message : error };\r\n  }\r\n}\r\n","export function getTimestamp() {\r\n  return Math.floor(+Date.now() / 1000);\r\n}\r\n","export function isStorageSupported(type: string): boolean {\r\n  try {\r\n    const storage = (window as { [key: string]: any })[type];\r\n    const testKey = \"__storage_test__\";\r\n\r\n    storage.setItem(testKey, \"1\");\r\n    storage.removeItem(testKey);\r\n\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Wrapper class for storage\r\nexport class MemoryStorage {\r\n  public storage: { [x: string]: string } = {};\r\n\r\n  public setItem = (key: string, data: string): void => {\r\n    const json = (data && data.toString()) || \"\";\r\n\r\n    this.storage[key] = json;\r\n  };\r\n\r\n  public getItem = (key: string): string | null => this.storage[key] || \"\";\r\n\r\n  public removeItem = (key: string): void => {\r\n    delete this.storage[key];\r\n  };\r\n\r\n  public clear = () => {\r\n    this.storage = new MemoryStorage().storage;\r\n  };\r\n}\r\n\r\nexport const LocalStorage = isStorageSupported(\"localStorage\")\r\n  ? window.localStorage\r\n  : new MemoryStorage();\r\n\r\nexport const SessionStorage = isStorageSupported(\"sessionStorage\")\r\n  ? window.sessionStorage\r\n  : new MemoryStorage();\r\n"],"names":["async","fetchForexData","_LocalStorage$getItem","_result","result","JSON","parse","LocalStorage","getItem","appConstants","webStorage","forexData","getTimestamp","timeNextUpdate","response","request","method","T_HTTPMethod","GET","endpoint","API","forex","mapForexRateResponse","setItem","stringify","conversionRates","baseCode","base_code","conversion_rates","timeLastUpdate","time_last_update_unix","time_next_update_unix","getQueryParams","params","Object","keys","filter","k","map","encodeURIComponent","join","_ref","headers","body","rawBody","url","indexOf","fetchOptions","credentials","mode","fetch","get","includes","json","status","text","error","Error","message","Math","floor","Date","now","isStorageSupported","type","storage","window","testKey","removeItem","MemoryStorage","constructor","key","data","toString","this","clear","localStorage","SessionStorage","sessionStorage"],"sourceRoot":""}