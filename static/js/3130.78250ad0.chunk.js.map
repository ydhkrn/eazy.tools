{"version":3,"file":"static/js/3130.78250ad0.chunk.js","mappings":"yLAOe,SAASA,EAAYC,GAIhC,IAADC,EAAAC,EAAAC,EACD,MAAMC,EAAKJ,EAAMI,KAAOC,EAAoB,EAAIL,EAAMI,GAChDE,EAAKN,EAAMM,KAAOC,EAAe,EAAIP,EAAMM,GAC3CE,EAAKR,EAAMQ,KAAOC,EAAe,EAAIT,EAAMQ,GAC3CE,EAAwBN,EAAKO,EAC7BC,EAAwBN,EAAKO,EAC7BC,EAAwBN,EAAKO,EAE7BC,GAAQC,EAAAA,EAAAA,QAAuB,MAC/BC,GAAQD,EAAAA,EAAAA,QAAuB,MAC/BE,GAAQF,EAAAA,EAAAA,QAAuB,MAyBrC,OAvBa,QAAbhB,EAAAe,EAAMI,eAAO,IAAAnB,GAAbA,EAAeoB,QACb,CAEE,CAAEC,UAAW,UAAU,IAAMZ,QAA6Ba,OAAQ,IAEpE,CAAEC,SAAU,MAAOC,WAAYC,IAAUC,OAAQ,SAAUC,MAAO,IAEvD,QAAb1B,EAAAgB,EAAME,eAAO,IAAAlB,GAAbA,EAAemB,QACb,CAEE,CAAEC,UAAW,UAAU,IAAMV,QAA6BW,OAAQ,IAGpE,CAAEC,SAAU,KAAMC,WAAYC,IAAUC,OAAQ,SAAUC,MAAO,IAEtD,QAAbzB,EAAAgB,EAAMC,eAAO,IAAAjB,GAAbA,EAAekB,QACb,CAEE,CAAEC,UAAW,UAAU,IAAMR,QAA6BS,OAAQ,IAGpE,CAAEC,SAAU,GAAIC,WAAYC,IAAUC,OAAQ,SAAUC,MAAO,KAG/DC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BC,EAAAA,EAAAA,MAAA,OAAKC,GAAG,QAAOF,SAAA,EACbF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBACfD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcC,SACzBG,EAAoBC,EAAkB,CAAEC,kBAAkB,OAG7DP,EAAAA,EAAAA,KAAA,MAAIC,UAAU,SAAQC,SACnBG,EAAoBG,EAAY,CAAEC,kBAAkB,OAEvDT,EAAAA,EAAAA,KAAA,OACEU,IAAKvB,EACLc,UAAU,gBAGZD,EAAAA,EAAAA,KAAA,OACEU,IAAKrB,EACLY,UAAU,kBAGZD,EAAAA,EAAAA,KAAA,OACEU,IAAKpB,EACLW,UAAU,qBAMpB,CA4BA,SAASI,EAAoBM,EAAWC,GACtC,MAAO,IAAIC,MAAMF,IAAIG,KAAI,CAACC,EAAGC,KAC3B,IAAIC,EAAiCD,EAWrC,OAVW,OAAPJ,QAAO,IAAPA,GAAAA,EAASH,mBACXQ,EAAgBD,EAAQ,GAEf,OAAPJ,QAAO,IAAPA,GAAAA,EAASM,eACXD,EAAgBE,OAAOF,GAAeG,SAAS,EAAG,MAEzC,OAAPR,QAAO,IAAPA,GAAAA,EAASL,mBACXU,EAAgB,KAGXjB,EAAAA,EAAAA,KAAA,MAAAE,SAAiBe,GAARD,EAA2B,GAE/C,CAEA,MAAMpC,EAAe,GACfF,EAAe,GACf8B,EAAa,GACbhC,EAAoB,GACpB8B,EAAmB,GACnBtB,EAAoB,EACpBE,EAAoB,EACpBJ,EAAkB,E,gDC9HxB,SAAiB,C","sources":["shared/components/analogClock/index.tsx","webpack://eazy.tools-dev/./src/shared/components/analogClock/styles.scss?0270"],"sourcesContent":["import React, { useRef } from \"react\";\r\n\r\nimport { arrayRearrange } from \"shared/helpers/dataStructure\";\r\nimport { toNumber } from \"shared/helpers/number\";\r\nimport { T_ListItemMarkupOptions } from \"./types\";\r\nimport \"./styles.scss\";\r\n\r\nexport default function AnalogClock(props: {\r\n  hh: number;\r\n  mm: number;\r\n  ss: number;\r\n}) {\r\n  const hh = props.hh === totalDigitalHours ? 0 : props.hh;\r\n  const mm = props.mm === totalMinutes ? 0 : props.mm;\r\n  const ss = props.ss === totalSeconds ? 0 : props.ss;\r\n  const hhHandInitialRotation = hh * perHourRotation;\r\n  const mmHandInitialRotation = mm * perMinuteRotation;\r\n  const ssHandInitialRotation = ss * perSecondRotation;\r\n\r\n  const hhRef = useRef<HTMLDivElement>(null);\r\n  const mmRef = useRef<HTMLDivElement>(null);\r\n  const ssRef = useRef<HTMLDivElement>(null);\r\n\r\n  hhRef.current?.animate(\r\n    [\r\n      // { transform: `rotate(${hhHandInitialRotation}deg)`, offset: 0 },\r\n      { transform: `rotate(${360 + hhHandInitialRotation}deg)`, offset: 1 }\r\n    ],\r\n    { duration: 43200, iterations: Infinity, easing: \"linear\", delay: 0 }\r\n  );\r\n  mmRef.current?.animate(\r\n    [\r\n      // { transform: `rotate(${mmHandInitialRotation}deg)`, offset: 0 },\r\n      { transform: `rotate(${360 + mmHandInitialRotation}deg)`, offset: 1 }\r\n    ],\r\n    // options\r\n    { duration: 3600, iterations: Infinity, easing: \"linear\", delay: 0 }\r\n  );\r\n  ssRef.current?.animate(\r\n    [\r\n      // { transform: `rotate(${ssHandInitialRotation}deg)`, offset: 0 },\r\n      { transform: `rotate(${360 + ssHandInitialRotation}deg)`, offset: 1 }\r\n    ],\r\n    // options\r\n    { duration: 60, iterations: Infinity, easing: \"linear\", delay: 0 }\r\n  );\r\n  return (\r\n    <div className=\"AnalogClock\">\r\n      <div id=\"watch\">\r\n        <div className=\"frame-face\"></div>\r\n        <ul className=\"minute-marks\">\r\n          {getNListItemsMarkup(totalMinutesMark, { doNotRenderIndex: true })}\r\n        </ul>\r\n        {/* {getDigitalClockMarkup(hh, mm, ss)} */}\r\n        <ul className=\"digits\">\r\n          {getNListItemsMarkup(totalHours, { naturalNumbering: true })}\r\n        </ul>\r\n        <div\r\n          ref={hhRef}\r\n          className=\"hours-hand\"\r\n          // style={{ transform: `rotate(${hhHandInitialRotation}deg)` }}\r\n        />\r\n        <div\r\n          ref={mmRef}\r\n          className=\"minutes-hand\"\r\n          // style={{ transform: `rotate(${mmHandInitialRotation}deg)` }}\r\n        />\r\n        <div\r\n          ref={ssRef}\r\n          className=\"seconds-hand\"\r\n          // style={{ transform: `rotate(${ssHandInitialRotation}deg)` }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getDigitalClockMarkup(hh: number, mm: number, ss: number) {\r\n  const hhItems = arrayRearrange(\r\n    getNListItemsMarkup(totalDigitalHours, {\r\n      zeroPadIndex: true\r\n    }),\r\n    toNumber(hh)\r\n  );\r\n\r\n  const mmItems = arrayRearrange(\r\n    getNListItemsMarkup(totalMinutes, { zeroPadIndex: true }),\r\n    toNumber(mm)\r\n  );\r\n  const ssItems = arrayRearrange(\r\n    getNListItemsMarkup(totalSeconds, { zeroPadIndex: true }),\r\n    toNumber(ss)\r\n  );\r\n\r\n  return (\r\n    <div className=\"digital-wrap\">\r\n      <ul className=\"digit-hours\">{hhItems}</ul>\r\n      <ul className=\"digit-minutes\">{mmItems}</ul>\r\n      <ul className=\"digit-seconds\">{ssItems}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getNListItemsMarkup(n: number, options?: T_ListItemMarkupOptions) {\r\n  return [...Array(n)].map((e, index) => {\r\n    let valueToRender: string | number = index;\r\n    if (options?.naturalNumbering) {\r\n      valueToRender = index + 1;\r\n    }\r\n    if (options?.zeroPadIndex) {\r\n      valueToRender = String(valueToRender).padStart(2, \"0\");\r\n    }\r\n    if (options?.doNotRenderIndex) {\r\n      valueToRender = \"\";\r\n    }\r\n\r\n    return <li key={index}>{valueToRender}</li>;\r\n  });\r\n}\r\n\r\nconst totalSeconds = 60;\r\nconst totalMinutes = 60;\r\nconst totalHours = 12;\r\nconst totalDigitalHours = 24;\r\nconst totalMinutesMark = 48; // 60 - <count where the actual digits are displayed instead of marks>\r\nconst perMinuteRotation = 360 / 60;\r\nconst perSecondRotation = 360 / 60;\r\nconst perHourRotation = 360 / 12;\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["AnalogClock","props","_hhRef$current","_mmRef$current","_ssRef$current","hh","totalDigitalHours","mm","totalMinutes","ss","totalSeconds","hhHandInitialRotation","perHourRotation","mmHandInitialRotation","perMinuteRotation","ssHandInitialRotation","perSecondRotation","hhRef","useRef","mmRef","ssRef","current","animate","transform","offset","duration","iterations","Infinity","easing","delay","_jsx","className","children","_jsxs","id","getNListItemsMarkup","totalMinutesMark","doNotRenderIndex","totalHours","naturalNumbering","ref","n","options","Array","map","e","index","valueToRender","zeroPadIndex","String","padStart"],"sourceRoot":""}