{"version":3,"file":"static/js/5788.70987f8e.chunk.js","mappings":"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","sources":["shared/components/unitConverter/helpers.ts","shared/components/unitConverter/hooks.ts","shared/components/unitConverter/types.ts","shared/helpers/number.ts","shared/helpers/pageCache.ts","shared/helpers/webStorage.ts"],"sourcesContent":["import {\n  T_ConversionRates,\n  T_FavoriteCodes,\n  T_FavoritesWithValue\n} from \"shared/components/unitConverter/types\";\nimport { round, toNumber } from \"shared/helpers/number\";\nimport { T_StringOrNumber } from \"shared/types/common\";\nimport { T_ConversionFormulas } from \"shared/types/unitConverter\";\n\nexport function sanitizeNumericInput(value: string) {\n  return (\n    value\n      // allow only numbers (with/without decimal values)\n      .replace(/[^0-9.]/g, \"\")\n      // allow only one decimal\n      .replace(/(\\..*?)\\..*/g, \"$1\")\n      // add a leading zero if the input is just a decimal point\n      // this will help 'toNumber' method to cast \"0.\" to 0\n      .replace(/^(\\.)$/, \"0.\")\n      // allow leading zero only for decimal values\n      .replace(/^0(\\d)/, \"$1\")\n  );\n}\n\nexport function getDefaultFavorites(\n  favoriteCodes: T_FavoriteCodes\n): T_FavoritesWithValue {\n  return favoriteCodes.map((code) => ({ code, value: \"\" }));\n}\n\nexport function calcValueForFavorites({\n  favorites,\n  conversionRates,\n  conversionFormulas,\n  inputCode,\n  inputValue\n}: T_CalcValueForFavoritesFnParams): T_FavoritesWithValue {\n  return favorites.map((favItem) => ({\n    ...favItem,\n    value: calcValue({\n      conversionRates,\n      conversionFormulas,\n      inputCode,\n      targetCode: favItem.code,\n      inputValue\n    })\n  }));\n}\n\nexport function calcValue({\n  conversionRates,\n  conversionFormulas,\n  inputCode,\n  targetCode,\n  inputValue\n}: T_CalcValueFnParams): T_StringOrNumber {\n  if (conversionFormulas) {\n    return calcValueBasedOnFormula({\n      conversionFormulas,\n      inputCode,\n      targetCode,\n      inputValue\n    });\n  } else if (conversionRates) {\n    return calcValueBasedOnRatio({\n      conversionRates,\n      inputCode,\n      targetCode,\n      inputValue\n    });\n  } else {\n    return inputValue;\n  }\n}\n\n/**\n * Assume:\n *    base code (of master data): BBB\n *    input code: CCC\n *    input value: x\n *    target code: YYY\n *\n * and we know (from master data):\n *    1 BBB = n1 CCC\n *    1 BBB = n2 YYY\n *\n * then,\n *               1 CCC  =  (1 / n1) BBB\n *               x CCC  =  x * (1 / n1) BBB\n *    x * (1 / n1) BBB  =  n2 * x * (1 / n1) YYY\n *               x CCC  =  n2 * x * / n1 YYY\n */\nfunction calcValueBasedOnRatio({\n  conversionRates,\n  inputCode,\n  targetCode,\n  inputValue\n}: { conversionRates: T_ConversionRates } & T_CalcValueFnParams) {\n  const x = toNumber(inputValue);\n  const n1 = conversionRates[inputCode];\n  const n2 = conversionRates[targetCode];\n\n  return round((n2 * x) / n1);\n}\n\nfunction calcValueBasedOnFormula({\n  conversionFormulas,\n  inputCode,\n  targetCode,\n  inputValue\n}: { conversionFormulas: T_ConversionFormulas } & T_CalcValueFnParams) {\n  let targetValue: T_StringOrNumber = 0;\n\n  if (inputCode === conversionFormulas.baseUnitCode) {\n    return conversionFormulas.fromBaseTo[targetCode](inputValue);\n  }\n\n  targetValue = conversionFormulas.toBaseFrom[inputCode](inputValue);\n\n  if (targetCode === conversionFormulas.baseUnitCode) {\n    return targetValue;\n  } else {\n    return conversionFormulas.fromBaseTo[targetCode](targetValue);\n  }\n}\n\ntype T_CalcValueForFavoritesFnParams = Omit<\n  T_CalcValueFnParams,\n  \"targetCode\"\n> & {\n  favorites: T_FavoritesWithValue;\n};\n\ntype T_CalcValueFnParams = {\n  inputCode: string;\n  targetCode: string;\n  inputValue: T_StringOrNumber;\n  conversionRates?: T_ConversionRates;\n  conversionFormulas?: T_ConversionFormulas;\n};\n","import React, { useMemo, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport PageCache from \"shared/helpers/pageCache\";\nimport {\n  sanitizeNumericInput,\n  getDefaultFavorites,\n  calcValue,\n  calcValueForFavorites\n} from \"./helpers\";\nimport {\n  E_PageCacheKeys,\n  E_UnitConverterActions,\n  E_UnitConverterListItemActions,\n  T_FavoriteCodes,\n  T_UnitConverterAction,\n  T_UnitConverterConversionLogicProps,\n  T_UnitConverterPropsDefaults,\n  T_UnitConverterState\n} from \"./types\";\n\nexport function useElementHandlers(\n  dispatch: React.Dispatch<T_UnitConverterAction>,\n  pageCache: PageCache\n) {\n  const inputValueEl = useRef<HTMLInputElement>(null);\n  const targetValueEl = useRef<HTMLInputElement>(null);\n\n  const eventHandlers = useMemo(() => {\n    const handleInputValueChange = (\n      event: React.ChangeEvent<HTMLInputElement>\n    ) => dispatch([E_UnitConverterActions.setInputValue, event.target.value]);\n    const handleTargetValueChange = (\n      event: React.ChangeEvent<HTMLInputElement>\n    ) => dispatch([E_UnitConverterActions.setTargetValue, event.target.value]);\n    const handleListItemAction = (\n      event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => {\n      const { code, actionName } = event.currentTarget.dataset;\n      if (code && actionName) {\n        switch (actionName as unknown as E_UnitConverterListItemActions) {\n          case E_UnitConverterListItemActions.input: {\n            pageCache.set(E_PageCacheKeys.inputCode, code);\n            dispatch([E_UnitConverterActions.setInputCode, code]);\n            inputValueEl.current?.focus();\n            return;\n          }\n          case E_UnitConverterListItemActions.target: {\n            pageCache.set(E_PageCacheKeys.targetCode, code);\n            dispatch([E_UnitConverterActions.setTargetCode, code]);\n            targetValueEl.current?.focus();\n            return;\n          }\n          default:\n            return;\n        }\n      }\n    };\n    const handleInputTargetCodeSwapClick = (\n      inputCode: string,\n      targetCode: string\n    ) => {\n      pageCache.set(E_PageCacheKeys.inputCode, targetCode);\n      pageCache.set(E_PageCacheKeys.targetCode, inputCode);\n      dispatch([E_UnitConverterActions.swapInputTargetCode]);\n      inputValueEl.current?.focus();\n    };\n    const handleInputClearClick = () => {\n      dispatch([E_UnitConverterActions.setInputValue, \"\"]);\n      inputValueEl.current?.focus();\n    };\n    const handleTargetClearClick = () => {\n      dispatch([E_UnitConverterActions.setTargetValue, \"\"]);\n      targetValueEl.current?.focus();\n    };\n\n    return {\n      handleInputValueChange,\n      handleTargetValueChange,\n      handleListItemAction,\n      handleInputClearClick,\n      handleTargetClearClick,\n      handleInputTargetCodeSwapClick\n    };\n  }, [dispatch, pageCache]);\n\n  return {\n    inputValueEl,\n    targetValueEl,\n    ...eventHandlers\n  };\n}\n\nexport function useDefaults(defaults: T_UnitConverterPropsDefaults) {\n  const location = useLocation();\n\n  return useMemo(() => {\n    const pageCache = new PageCache(location.pathname);\n    return {\n      inputCode:\n        pageCache.get<string>(E_PageCacheKeys.inputCode) || defaults.inputCode,\n      targetCode:\n        pageCache.get<string>(E_PageCacheKeys.targetCode) ||\n        defaults.targetCode,\n      favorites: getDefaultFavorites(\n        (pageCache.get(E_PageCacheKeys.favoriteCodes) as T_FavoriteCodes) ||\n          defaults.favoriteCodes\n      ),\n      pageCache\n    };\n  }, [location, defaults]);\n}\n\nexport function createReducer(props: T_UnitConverterConversionLogicProps) {\n  return (\n    state: T_UnitConverterState,\n    [type, payload]: T_UnitConverterAction\n  ) => {\n    if (!props.conversionRates && !props.conversionFormulas) {\n      return state;\n    }\n\n    const conversionLogicProps = {\n      conversionRates: props.conversionRates,\n      conversionFormulas: props.conversionFormulas\n    };\n\n    switch (type) {\n      case E_UnitConverterActions.setInputCode: {\n        return {\n          ...state,\n          inputCode: payload,\n          targetValue: calcValue({\n            ...conversionLogicProps,\n            inputCode: payload,\n            targetCode: state.targetCode,\n            inputValue: state.inputValue\n          }),\n          favorites: calcValueForFavorites({\n            ...conversionLogicProps,\n            favorites: state.favorites,\n            inputCode: payload,\n            inputValue: state.inputValue\n          })\n        };\n      }\n\n      case E_UnitConverterActions.setTargetCode: {\n        const newInputValue = calcValue({\n          ...conversionLogicProps,\n          inputCode: payload,\n          targetCode: state.inputCode,\n          inputValue: state.targetValue\n        });\n\n        return {\n          ...state,\n          targetCode: payload,\n          inputValue: newInputValue,\n          favorites: calcValueForFavorites({\n            ...conversionLogicProps,\n            favorites: state.favorites,\n            inputCode: state.inputCode,\n            inputValue: newInputValue\n          })\n        };\n      }\n\n      case E_UnitConverterActions.swapInputTargetCode: {\n        return {\n          ...state,\n          inputCode: state.targetCode,\n          targetCode: state.inputCode,\n          inputValue: state.targetValue,\n          targetValue: state.inputValue\n        };\n      }\n\n      case E_UnitConverterActions.setInputValue: {\n        const sanitizedInputValue = sanitizeNumericInput(payload);\n\n        // Avoid state update (and re-render) if there is no change\n        if (sanitizedInputValue === state.inputValue) {\n          return state;\n        }\n\n        return {\n          ...state,\n          inputValue: sanitizedInputValue,\n          targetValue: calcValue({\n            ...conversionLogicProps,\n            inputCode: state.inputCode,\n            targetCode: state.targetCode,\n            inputValue: sanitizedInputValue\n          }),\n          favorites: calcValueForFavorites({\n            ...conversionLogicProps,\n            favorites: state.favorites,\n            inputCode: state.inputCode,\n            inputValue: sanitizedInputValue\n          })\n        };\n      }\n\n      case E_UnitConverterActions.setTargetValue: {\n        const sanitizedTargetValue = sanitizeNumericInput(payload);\n\n        // Avoid state update (and re-render) if there is no change\n        if (sanitizedTargetValue === state.targetValue) {\n          return state;\n        }\n\n        const newInputValue = calcValue({\n          ...conversionLogicProps,\n          inputCode: state.targetCode,\n          targetCode: state.inputCode,\n          inputValue: sanitizedTargetValue\n        });\n\n        return {\n          ...state,\n          inputValue: newInputValue,\n          targetValue: sanitizedTargetValue,\n          favorites: calcValueForFavorites({\n            ...conversionLogicProps,\n            favorites: state.favorites,\n            inputCode: state.inputCode,\n            inputValue: newInputValue\n          })\n        };\n      }\n\n      case E_UnitConverterActions.toggleFavorite: {\n        const favoritesArrWithoutPayloadItem = state.favorites.filter(\n          (favItem) => favItem.code !== payload\n        );\n\n        // Check if the filtering resulted in a smaller array than state.favorites\n        if (favoritesArrWithoutPayloadItem.length < state.favorites.length) {\n          // This means that the supplied item already existed in state.favorites\n          // and we just obtained an array after removing it.\n          return {\n            ...state,\n            favorites: favoritesArrWithoutPayloadItem\n          };\n        }\n\n        // Otherwise it means that payload item is a new item to be favorited\n        return {\n          ...state,\n          favorites: [...state.favorites, payload]\n        };\n      }\n      default:\n        return state;\n    }\n  };\n}\n","import React from \"react\";\nimport {\n  T_ConversionFormulas,\n  T_UnitConversionAllUnitsMap\n} from \"shared/types/unitConverter\";\nimport { T_Object } from \"shared/types/generics\";\nimport { T_StringOrNumber } from \"shared/types/common\";\n\nexport const enum E_PageCacheKeys {\n  inputCode = \"inputCode\",\n  targetCode = \"targetCode\",\n  favoriteCodes = \"favoriteCodes\"\n}\n\nexport const enum E_UnitConverterListItemActions {\n  input = \"INPUT\",\n  target = \"TARGET\"\n}\n\nexport const enum E_UnitConverterActions {\n  setInputCode,\n  setTargetCode,\n  setInputValue,\n  setTargetValue,\n  swapInputTargetCode,\n  toggleFavorite\n}\n\nexport type T_ConverionRateAPIFn = (...args: any[]) => Promise<\n  | {\n      conversionRates: T_ConversionRates;\n    }\n  | undefined\n  | null\n>;\n\nexport type T_UnitConverterPropsDefaults = {\n  inputCode: string;\n  targetCode: string;\n  favoriteCodes: T_FavoriteCodes;\n};\n\nexport type T_UnitConverterConversionLogicProps = {\n  conversionRates?: T_ConversionRates;\n  conversionFormulas?: T_ConversionFormulas;\n};\n\nexport type T_UnitConverterProps = {\n  allUnitsMap: T_UnitConversionAllUnitsMap;\n  defaults: T_UnitConverterPropsDefaults;\n  UnitIconComponent?: React.ComponentType<{\n    code: string;\n    wrapperClassName?: string;\n    iconClassName?: string;\n  }>;\n} & T_UnitConverterConversionLogicProps;\n\nexport type T_FavoriteItemWithValue = {\n  code: string;\n  value: T_StringOrNumber;\n};\n\nexport type T_FavoriteCodes = string[];\n\nexport type T_FavoritesWithValue = T_FavoriteItemWithValue[];\n\nexport type T_ConversionRates = T_Object<number>;\n\nexport type T_UnitConverterAction = [\n  type: E_UnitConverterActions,\n  payload?: any\n];\n\nexport type T_UnitConverterState = {\n  inputCode: string;\n  targetCode: string;\n  favorites: T_FavoritesWithValue;\n  inputValue: string | number;\n  targetValue: string | number;\n};\n","export function toNumber(x: any) {\n  return +x;\n}\n\nexport function round(num: number | string, fractionDigits: number = 2) {\n  return toNumber(toNumber(num).toFixed(fractionDigits));\n}\n","import { LocalStorage } from \"shared/helpers/webStorage\";\n\nexport default class PageCache {\n  keyPrefix: string;\n  cachedKeys: string[] = [];\n\n  constructor(pathname: string) {\n    this.keyPrefix = pathname;\n  }\n\n  private getPageKey(key: string) {\n    return `${this.keyPrefix}-${key}`;\n  }\n\n  public set = (key: string, data: any = null): void => {\n    const pageKey = this.getPageKey(key);\n    LocalStorage.setItem(pageKey, JSON.stringify(data));\n    this.cachedKeys.push(key);\n  };\n\n  public get = <Result>(key: string): Result | null => {\n    const pageKey = this.getPageKey(key);\n    return JSON.parse(LocalStorage.getItem(pageKey) ?? \"null\");\n  };\n\n  public remove = (key: string): void => {\n    const pageKey = this.getPageKey(key);\n    LocalStorage.removeItem(pageKey);\n    this.cachedKeys = this.cachedKeys.filter((k) => k !== key);\n  };\n\n  public clearAll = () => {\n    this.cachedKeys.forEach((key) => this.remove(key));\n    this.cachedKeys = [];\n  };\n}\n","export function isStorageSupported(type: string): boolean {\n  try {\n    const storage = (window as { [key: string]: any })[type];\n    const testKey = \"__storage_test__\";\n\n    storage.setItem(testKey, \"1\");\n    storage.removeItem(testKey);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// Wrapper class for storage\nexport class MemoryStorage {\n  public storage: { [x: string]: string } = {};\n\n  public setItem = (key: string, data: string): void => {\n    const json = (data && data.toString()) || \"\";\n\n    this.storage[key] = json;\n  };\n\n  public getItem = (key: string): string | null => this.storage[key] || \"\";\n\n  public removeItem = (key: string): void => {\n    delete this.storage[key];\n  };\n\n  public clear = () => {\n    this.storage = new MemoryStorage().storage;\n  };\n}\n\nexport const LocalStorage = isStorageSupported(\"localStorage\")\n  ? window.localStorage\n  : new MemoryStorage();\n\nexport const SessionStorage = isStorageSupported(\"sessionStorage\")\n  ? window.sessionStorage\n  : new MemoryStorage();\n"],"names":["sanitizeNumericInput","value","replace","getDefaultFavorites","favoriteCodes","map","code","calcValueForFavorites","favorites","conversionRates","conversionFormulas","inputCode","inputValue","favItem","calcValue","targetCode","targetValue","baseUnitCode","fromBaseTo","toBaseFrom","calcValueBasedOnFormula","x","toNumber","n1","n2","round","calcValueBasedOnRatio","useElementHandlers","dispatch","pageCache","inputValueEl","useRef","targetValueEl","eventHandlers","useMemo","handleInputValueChange","event","E_UnitConverterActions","target","handleTargetValueChange","handleListItemAction","currentTarget","dataset","actionName","E_UnitConverterListItemActions","set","E_PageCacheKeys","current","focus","handleInputClearClick","handleTargetClearClick","handleInputTargetCodeSwapClick","useDefaults","defaults","location","useLocation","PageCache","pathname","get","createReducer","props","state","type","payload","conversionLogicProps","newInputValue","sanitizedInputValue","sanitizedTargetValue","favoritesArrWithoutPayloadItem","filter","length","num","fractionDigits","toFixed","keyPrefix","cachedKeys","key","data","pageKey","getPageKey","LocalStorage","JSON","stringify","push","parse","remove","k","clearAll","forEach","this","isStorageSupported","storage","window","testKey","setItem","removeItem","error","MemoryStorage","json","toString","getItem","clear","localStorage","SessionStorage","sessionStorage"],"sourceRoot":""}