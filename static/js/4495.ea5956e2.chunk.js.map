{"version":3,"file":"static/js/4495.ea5956e2.chunk.js","mappings":"sPASO,SAASA,EAAqBC,GACnC,OACEA,EAEGC,QAAQ,WAAY,IAEpBA,QAAQ,eAAgB,MAGxBA,QAAQ,SAAU,MAElBA,QAAQ,SAAU,KAEzB,CAEO,SAASC,EACdC,GAEA,OAAOA,EAAcC,KAAKC,IAAI,CAAQA,OAAML,MAAO,MACrD,CAEO,SAASM,EAAqBC,GAMsB,IANrB,UACpCC,EAAS,gBACTC,EAAe,mBACfC,EAAkB,UAClBC,EAAS,WACTC,GACgCL,EAChC,OAAOC,EAAUJ,KAAKS,IAAO,IACxBA,EACHb,MAAOc,EAAU,CACfL,kBACAC,qBACAC,YACAI,WAAYF,EAAQR,KACpBO,kBAGN,CAEO,SAASE,EAASE,GAMkB,IANjB,gBACxBP,EAAe,mBACfC,EAAkB,UAClBC,EAAS,WACTI,EAAU,WACVH,GACoBI,EACpB,OAAIN,EAiDN,SAAgCO,GAKwC,IALvC,mBAC/BP,EAAkB,UAClBC,EAAS,WACTI,EAAU,WACVH,GACmEK,EAC/DC,EAAgC,EAEpC,GAAIP,IAAcD,EAAmBS,aACnC,OAAOT,EAAmBU,WAAWL,GAAYH,GAKnD,OAFAM,EAAcR,EAAmBW,WAAWV,GAAWC,GAEnDG,IAAeL,EAAmBS,aAC7BD,EAEAR,EAAmBU,WAAWL,GAAYG,EAErD,CAnEWI,CAAwB,CAC7BZ,qBACAC,YACAI,aACAH,eAEOH,EA6Bb,SAA8Bc,GAKoC,IALnC,gBAC7Bd,EAAe,UACfE,EAAS,WACTI,EAAU,WACVH,GAC6DW,EAC7D,MAAMC,GAAIC,EAAAA,EAAAA,UAASb,GACbc,EAAKjB,EAAgBE,GACrBgB,EAAKlB,EAAgBM,GAE3B,OAAOa,EAAAA,EAAAA,OAAOD,EAAKH,EAAKE,EAC1B,CAvCWG,CAAsB,CAC3BpB,kBACAE,YACAI,aACAH,eAGKA,CAEX,C,kBCzEO,SAASa,EAASD,GACvB,OAAQA,CACV,CAEO,SAASI,EAAME,GAAmD,IAA7BC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACnE,OAAOP,EAASA,EAASK,GAAKK,QAAQJ,GACxC,C","sources":["shared/components/unitConverter/helpers.ts","shared/helpers/number.ts"],"sourcesContent":["import {\r\n  T_ConversionRates,\r\n  T_FavoriteCodes,\r\n  T_FavoritesWithValue\r\n} from \"shared/components/unitConverter/types\";\r\nimport { round, toNumber } from \"shared/helpers/number\";\r\nimport { T_StringOrNumber } from \"shared/types/common\";\r\nimport { T_ConversionFormulas } from \"shared/types/unitConverter\";\r\n\r\nexport function sanitizeNumericInput(value: string) {\r\n  return (\r\n    value\r\n      // allow only numbers (with/without decimal values)\r\n      .replace(/[^0-9.]/g, \"\")\r\n      // allow only one decimal\r\n      .replace(/(\\..*?)\\..*/g, \"$1\")\r\n      // add a leading zero if the input is just a decimal point\r\n      // this will help 'toNumber' method to cast \"0.\" to 0\r\n      .replace(/^(\\.)$/, \"0.\")\r\n      // allow leading zero only for decimal values\r\n      .replace(/^0(\\d)/, \"$1\")\r\n  );\r\n}\r\n\r\nexport function getDefaultFavorites(\r\n  favoriteCodes: T_FavoriteCodes\r\n): T_FavoritesWithValue {\r\n  return favoriteCodes.map((code) => ({ code, value: \"\" }));\r\n}\r\n\r\nexport function calcValueForFavorites({\r\n  favorites,\r\n  conversionRates,\r\n  conversionFormulas,\r\n  inputCode,\r\n  inputValue\r\n}: T_CalcValueForFavoritesFnParams): T_FavoritesWithValue {\r\n  return favorites.map((favItem) => ({\r\n    ...favItem,\r\n    value: calcValue({\r\n      conversionRates,\r\n      conversionFormulas,\r\n      inputCode,\r\n      targetCode: favItem.code,\r\n      inputValue\r\n    })\r\n  }));\r\n}\r\n\r\nexport function calcValue({\r\n  conversionRates,\r\n  conversionFormulas,\r\n  inputCode,\r\n  targetCode,\r\n  inputValue\r\n}: T_CalcValueFnParams): T_StringOrNumber {\r\n  if (conversionFormulas) {\r\n    return calcValueBasedOnFormula({\r\n      conversionFormulas,\r\n      inputCode,\r\n      targetCode,\r\n      inputValue\r\n    });\r\n  } else if (conversionRates) {\r\n    return calcValueBasedOnRatio({\r\n      conversionRates,\r\n      inputCode,\r\n      targetCode,\r\n      inputValue\r\n    });\r\n  } else {\r\n    return inputValue;\r\n  }\r\n}\r\n\r\n/**\r\n * Assume:\r\n *    base code (of master data): BBB\r\n *    input code: CCC\r\n *    input value: x\r\n *    target code: YYY\r\n *\r\n * and we know (from master data):\r\n *    1 BBB = n1 CCC\r\n *    1 BBB = n2 YYY\r\n *\r\n * then,\r\n *               1 CCC  =  (1 / n1) BBB\r\n *               x CCC  =  x * (1 / n1) BBB\r\n *    x * (1 / n1) BBB  =  n2 * x * (1 / n1) YYY\r\n *               x CCC  =  n2 * x * / n1 YYY\r\n */\r\nfunction calcValueBasedOnRatio({\r\n  conversionRates,\r\n  inputCode,\r\n  targetCode,\r\n  inputValue\r\n}: { conversionRates: T_ConversionRates } & T_CalcValueFnParams) {\r\n  const x = toNumber(inputValue);\r\n  const n1 = conversionRates[inputCode];\r\n  const n2 = conversionRates[targetCode];\r\n\r\n  return round((n2 * x) / n1);\r\n}\r\n\r\nfunction calcValueBasedOnFormula({\r\n  conversionFormulas,\r\n  inputCode,\r\n  targetCode,\r\n  inputValue\r\n}: { conversionFormulas: T_ConversionFormulas } & T_CalcValueFnParams) {\r\n  let targetValue: T_StringOrNumber = 0;\r\n\r\n  if (inputCode === conversionFormulas.baseUnitCode) {\r\n    return conversionFormulas.fromBaseTo[targetCode](inputValue);\r\n  }\r\n\r\n  targetValue = conversionFormulas.toBaseFrom[inputCode](inputValue);\r\n\r\n  if (targetCode === conversionFormulas.baseUnitCode) {\r\n    return targetValue;\r\n  } else {\r\n    return conversionFormulas.fromBaseTo[targetCode](targetValue);\r\n  }\r\n}\r\n\r\ntype T_CalcValueForFavoritesFnParams = Omit<\r\n  T_CalcValueFnParams,\r\n  \"targetCode\"\r\n> & {\r\n  favorites: T_FavoritesWithValue;\r\n};\r\n\r\ntype T_CalcValueFnParams = {\r\n  inputCode: string;\r\n  targetCode: string;\r\n  inputValue: T_StringOrNumber;\r\n  conversionRates?: T_ConversionRates;\r\n  conversionFormulas?: T_ConversionFormulas;\r\n};\r\n","export function toNumber(x: any) {\r\n  return +x;\r\n}\r\n\r\nexport function round(num: number | string, fractionDigits: number = 2) {\r\n  return toNumber(toNumber(num).toFixed(fractionDigits));\r\n}\r\n"],"names":["sanitizeNumericInput","value","replace","getDefaultFavorites","favoriteCodes","map","code","calcValueForFavorites","_ref","favorites","conversionRates","conversionFormulas","inputCode","inputValue","favItem","calcValue","targetCode","_ref2","_ref4","targetValue","baseUnitCode","fromBaseTo","toBaseFrom","calcValueBasedOnFormula","_ref3","x","toNumber","n1","n2","round","calcValueBasedOnRatio","num","fractionDigits","arguments","length","undefined","toFixed"],"sourceRoot":""}