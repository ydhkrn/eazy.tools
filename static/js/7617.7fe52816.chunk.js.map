{"version":3,"file":"static/js/7617.7fe52816.chunk.js","mappings":"+QAUO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,8FACDC,EAA6BC,KAAKC,MAAL,UAC/BC,EAAAA,aAAAA,QAAqBC,EAAAA,QAAAA,WAAAA,kBADU,QAC4B,aAM3DC,EAAAA,EAAAA,gBAAiBL,EAAOM,gBARrB,iCAUoBC,EAAAA,EAAAA,SAAyB,CAC9CC,OAAQC,EAAAA,aAAAA,IACRC,SAAUN,EAAAA,QAAAA,IAAAA,QAZT,QAUGO,EAVH,QAcUX,SACXA,GAASY,EAAAA,EAAAA,sBAAqBD,EAASX,QAEvCG,EAAAA,aAAAA,QACEC,EAAAA,QAAAA,WAAAA,UACAH,KAAKY,UAAUb,KAnBhB,0CAwBEA,SAxBF,aAwBE,EAAQc,iBAxBV,kE,wBCRA,SAASF,EAAqBD,GACnC,MAAO,CACLI,SAAUJ,EAASK,UACnBF,gBAAiBH,EAASM,iBAC1BC,eAAgBP,EAASQ,sBACzBb,eAAgBK,EAASS,sBAE5B,C,wMCTiBX,E,gCAAlB,SAAkBA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,KAAAA,OAAAA,EAAAA,IAAAA,MAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,QAAAA,CAAlB,CAAkBA,IAAAA,EAAAA,CAAAA,IAiBX,IAAMY,EAAiB,SAACC,GAAD,OAC5BC,OAAOC,KAAKF,GACTG,QACC,SAACC,GAAD,MACuB,qBAAdJ,EAAOI,IACA,OAAdJ,EAAOI,IACO,KAAdJ,EAAOI,EAHT,IAKDC,KAAI,SAACD,GAAD,gBAAUE,mBAAmBF,GAA7B,YAAmCE,mBAAmBN,EAAOI,IAA7D,IACJG,KAAK,IAToB,EAWf,SAAetB,EAA9B,+CAAe,OAAf,oBAAe,8GACbC,EADa,EACbA,OACAE,EAFa,EAEbA,SACAY,EAHa,EAGbA,OACAQ,EAJa,EAIbA,QACAC,EALa,EAKbA,KACAC,EANa,EAMbA,QAKIC,EAAMvB,EACNY,IACFW,KAA8B,IAAtBA,EAAIC,QAAQ,KAAc,IAAM,KAAOb,EAAeC,IAG1Da,EAA4B,CAChCL,QAAAA,EACAtB,OAAAA,EACA4B,YAAa,cACbC,KAAM,QAEJ7B,IAAWC,EAAa6B,MAAQN,GAAWD,KAC7CI,EAAaJ,KAAOC,GAAW/B,KAAKY,UAAUkB,IAvBnC,kBA2BYQ,MAAMN,EAAKE,GA3BvB,UA2BLxB,EA3BK,SA4BSA,EAASmB,QAAQU,IAAI,iBAAmB,IAG5CC,SAAS,oBA/Bd,kCAgCM9B,EAAS+B,OAhCf,QAgCT1C,EAhCS,+BAkCTA,EAASW,EAlCA,aAqCPA,EAASgC,QAAU,KArCZ,yBAsCH3C,EAtCG,uCAsCcW,EAASiC,OAtCvB,wEAyCJ,CAAE5C,OAAAA,IAzCE,2DA2CJ,CAAE6C,MAAO,gBAAiBC,MAAQ,KAAMC,QAA/B,OA3CL,iF,wBC5BR,SAAS1C,IACd,OAAO2C,KAAKC,OAAOC,KAAKC,MAAQ,IACjC,C,oQCFM,SAASC,EAAmBC,GACjC,IACE,IAAMC,EAAWC,OAAkCF,GAC7CG,EAAU,mBAKhB,OAHAF,EAAQG,QAAQD,EAAS,KACzBF,EAAQI,WAAWF,IAEZ,CAGR,CAFC,MAAOX,GACP,OAAO,CACR,CACF,CAGM,IAAMc,GAAb,qDACSL,QAAmC,CAAC,EAD7C,KAGSG,QAAU,SAACG,EAAaC,GAC7B,IAAMnB,EAAQmB,GAAQA,EAAKC,YAAe,GAE1C,EAAKR,QAAQM,GAAOlB,CACrB,EAPH,KASSqB,QAAU,SAACH,GAAD,OAAgC,EAAKN,QAAQM,IAAQ,EAArD,EATnB,KAWSF,WAAa,SAACE,UACZ,EAAKN,QAAQM,EACrB,EAbH,KAeSI,MAAQ,WACb,EAAKV,SAAU,IAAIK,GAAgBL,OACpC,CAjBH,IAoBanD,EAAeiD,EAAmB,gBAC3CG,OAAOU,aACP,IAAIN,EAEKO,EAAiBd,EAAmB,kBAC7CG,OAAOY,eACP,IAAIR,C","sources":["pages/tools/money/forex/api.ts","pages/tools/money/forex/helpers.ts","shared/helpers/request.ts","shared/helpers/time.ts","shared/helpers/webStorage.ts"],"sourcesContent":["import appConstants from \"shared/constants/app\";\nimport { getTimestamp } from \"shared/helpers/time\";\nimport { LocalStorage } from \"shared/helpers/webStorage\";\nimport request, { T_HTTPMethod } from \"shared/helpers/request\";\nimport {\n  mapForexRateResponse,\n  T_ForexData,\n  T_ForexResponse\n} from \"./helpers\";\n\nexport async function fetchForexData() {\n  let result: T_ForexData | null = JSON.parse(\n    LocalStorage.getItem(appConstants.webStorage.forexData) ?? \"null\"\n  );\n\n  // Make the API call only when necessary\n  if (\n    !result || // if there is no cached data yet\n    getTimestamp() > result.timeNextUpdate // // OR if cached data is expired\n  ) {\n    const response = await request<T_ForexResponse>({\n      method: T_HTTPMethod.GET,\n      endpoint: appConstants.API.forex\n    });\n    if (response.result) {\n      result = mapForexRateResponse(response.result);\n      // Update cache with latest data\n      LocalStorage.setItem(\n        appConstants.webStorage.forexData,\n        JSON.stringify(result)\n      );\n    }\n  }\n\n  return result?.conversionRates;\n}\n","import { T_ConversionRates } from \"shared/components/unitConverter/types\";\n\nexport function mapForexRateResponse(response: T_ForexResponse) {\n  return {\n    baseCode: response.base_code,\n    conversionRates: response.conversion_rates,\n    timeLastUpdate: response.time_last_update_unix,\n    timeNextUpdate: response.time_next_update_unix\n  };\n}\n\n/**\n * Types\n */\nexport interface T_ForexResponse {\n  conversion_rates: T_ConversionRates;\n  base_code: string;\n  time_last_update_unix: number;\n  time_last_update_utc: string;\n  time_next_update_unix: number;\n  time_next_update_utc: string;\n}\n\nexport type T_ForexData = ReturnType<typeof mapForexRateResponse>;\n","export const enum T_HTTPMethod {\n  GET = \"GET\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  PATCH = \"PATCH\",\n  DELETE = \"DELETE\"\n}\n\ninterface T_RequestOptions {\n  method: T_HTTPMethod;\n  endpoint: string;\n  params?: { [key: string]: any };\n  headers?: HeadersInit;\n  body?: any;\n  rawBody?: BodyInit | null;\n}\n\nexport const getQueryParams = (params: { [key: string]: string }): string =>\n  Object.keys(params)\n    .filter(\n      (k) =>\n        typeof params[k] !== \"undefined\" &&\n        params[k] !== null &&\n        params[k] !== \"\"\n    ) // removes if empty, but accepts \"0\"\n    .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n    .join(\"&\");\n\nexport default async function request<T>({\n  method,\n  endpoint,\n  params,\n  headers,\n  body,\n  rawBody\n}: T_RequestOptions): Promise<{\n  result?: T;\n  error?: unknown;\n}> {\n  let url = endpoint;\n  if (params) {\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + getQueryParams(params);\n  }\n\n  const fetchOptions: RequestInit = {\n    headers,\n    method,\n    credentials: \"same-origin\",\n    mode: \"cors\"\n  };\n  if (method !== T_HTTPMethod.GET && (rawBody || body)) {\n    fetchOptions.body = rawBody || JSON.stringify(body);\n  }\n\n  try {\n    const response = await fetch(url, fetchOptions);\n    const contentType = response.headers.get(\"Content-Type\") || \"\";\n    let result: T;\n\n    if (contentType.includes(\"application/json\")) {\n      result = await response.json();\n    } else {\n      result = response as unknown as T;\n    }\n\n    if (response.status >= 400) {\n      throw result || (await response.text());\n    }\n\n    return { result };\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : error };\n  }\n}\n","export function getTimestamp() {\n  return Math.floor(+Date.now() / 1000);\n}\n","export function isStorageSupported(type: string): boolean {\n  try {\n    const storage = (window as { [key: string]: any })[type];\n    const testKey = \"__storage_test__\";\n\n    storage.setItem(testKey, \"1\");\n    storage.removeItem(testKey);\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n// Wrapper class for storage\nexport class MemoryStorage {\n  public storage: { [x: string]: string } = {};\n\n  public setItem = (key: string, data: string): void => {\n    const json = (data && data.toString()) || \"\";\n\n    this.storage[key] = json;\n  };\n\n  public getItem = (key: string): string | null => this.storage[key] || \"\";\n\n  public removeItem = (key: string): void => {\n    delete this.storage[key];\n  };\n\n  public clear = () => {\n    this.storage = new MemoryStorage().storage;\n  };\n}\n\nexport const LocalStorage = isStorageSupported(\"localStorage\")\n  ? window.localStorage\n  : new MemoryStorage();\n\nexport const SessionStorage = isStorageSupported(\"sessionStorage\")\n  ? window.sessionStorage\n  : new MemoryStorage();\n"],"names":["fetchForexData","result","JSON","parse","LocalStorage","appConstants","getTimestamp","timeNextUpdate","request","method","T_HTTPMethod","endpoint","response","mapForexRateResponse","stringify","conversionRates","baseCode","base_code","conversion_rates","timeLastUpdate","time_last_update_unix","time_next_update_unix","getQueryParams","params","Object","keys","filter","k","map","encodeURIComponent","join","headers","body","rawBody","url","indexOf","fetchOptions","credentials","mode","GET","fetch","get","includes","json","status","text","error","Error","message","Math","floor","Date","now","isStorageSupported","type","storage","window","testKey","setItem","removeItem","MemoryStorage","key","data","toString","getItem","clear","localStorage","SessionStorage","sessionStorage"],"sourceRoot":""}