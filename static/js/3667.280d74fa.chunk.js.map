{"version":3,"file":"static/js/3667.280d74fa.chunk.js","mappings":"kLAOO,MAAMA,EAAwC,CAInDC,GAAI,CACFC,KAAM,aACNC,OAAQ,MAEVC,GAAI,CACFF,KAAM,aACNC,OAAQ,MAEVE,EAAG,CACDH,KAAM,QACNC,OAAQ,KAEVG,GAAI,CACFJ,KAAM,YACNC,OAAQ,MAKVI,GAAI,CACFL,KAAM,OACNC,OAAQ,MAEVK,GAAI,CACFN,KAAM,OACNC,OAAQ,MAEVM,GAAI,CACFP,KAAM,OACNC,OAAQ,MAEVO,GAAI,CACFR,KAAM,OACNC,OAAQ,OAwBNQ,EAA2C,CAC/CC,aArBe,IAsBfC,WAAY,CACVR,EAAIS,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAASF,GALN,GAM3Bb,GAAKa,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GANP,GAO3BR,GAAKQ,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,KAAJF,GAPP,GAQ3BV,GAAKU,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GARP,GAS3BP,GAAKO,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,SAAJF,GATP,GAU3BN,GAAKM,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,QAAJF,GAVP,GAW3BL,GAAKK,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,QAAJF,GAXP,GAY3BJ,GAAKI,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GAZP,IAc7BG,WAAY,CACVZ,EAAIS,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAASF,GAfN,GAgB3Bb,GAAKa,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,KAAJF,GAhBP,GAiB3BR,GAAKQ,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GAjBP,GAkB3BV,GAAKU,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,IAAJF,GAlBP,GAmB3BP,GAAKO,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GAnBP,GAoB3BN,GAAKM,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GApBP,GAqB3BL,GAAKK,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,MAAJF,GArBP,GAsB3BJ,GAAKI,IAAcC,EAAAA,EAAAA,QAAMC,EAAAA,EAAAA,UAAa,SAAJF,GAtBP,KA0BzBI,EAAW,CACfC,UAAW,KACXC,WAAY,IACZC,cAAeC,OAAOC,KAAKvB,IAW7B,EARwB,CACtBA,WACAwB,SApDe,IAqDfN,WACAO,gBArDsB,CAItBpB,EAAG,EACHJ,GAAI,IACJK,GAAI,KACJF,GAAI,IAIJG,GAAI,SACJC,GAAI,QACJC,GAAI,SACJC,GAAI,aAwCJC,qB,kBCvGK,SAASK,EAASF,GACvB,OAAQA,CACV,CAEO,SAASC,EAAMW,GAAmD,IAA7BC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACnE,OAAOZ,EAASA,EAASU,GAAKK,QAAQJ,GACxC,C","sources":["pages/tools/convert/length/constants.ts","shared/helpers/number.ts"],"sourcesContent":["import { T_FavoriteCodes } from \"shared/components/unitConverter/types\";\r\nimport { round, toNumber } from \"shared/helpers/number\";\r\nimport {\r\n  T_ConversionFormulas,\r\n  T_UnitConversionAllUnitsMap\r\n} from \"shared/types/unitConverter\";\r\n\r\nexport const unitsMap: T_UnitConversionAllUnitsMap = {\r\n  /**\r\n   * Metric\r\n   */\r\n  mm: {\r\n    name: \"Millimeter\",\r\n    symbol: \"mm\"\r\n  },\r\n  cm: {\r\n    name: \"Centimeter\",\r\n    symbol: \"cm\"\r\n  },\r\n  m: {\r\n    name: \"Meter\",\r\n    symbol: \"m\"\r\n  },\r\n  km: {\r\n    name: \"Kilometer\",\r\n    symbol: \"km\"\r\n  },\r\n  /**\r\n   * British Imperial / US customary\r\n   */\r\n  in: {\r\n    name: \"Inch\",\r\n    symbol: \"in\"\r\n  },\r\n  ft: {\r\n    name: \"Feet\",\r\n    symbol: \"ft\"\r\n  },\r\n  yd: {\r\n    name: \"Yard\",\r\n    symbol: \"yd\"\r\n  },\r\n  mi: {\r\n    name: \"Mile\",\r\n    symbol: \"mi\"\r\n  }\r\n};\r\n\r\nconst baseUnit = \"m\";\r\nconst conversionRates = {\r\n  /**\r\n   * Metric\r\n   */\r\n  m: 1,\r\n  mm: 1000,\r\n  km: 0.001,\r\n  cm: 100,\r\n  /**\r\n   * British Imperial / US customary\r\n   */\r\n  in: 39.37008,\r\n  ft: 3.28084,\r\n  yd: 1.093613,\r\n  mi: 0.0006213712\r\n};\r\n\r\nconst roundingFractionDigits = 7;\r\n\r\nconst conversionFormulas: T_ConversionFormulas = {\r\n  baseUnitCode: baseUnit,\r\n  fromBaseTo: {\r\n    m: (x: number) => round(toNumber(x), roundingFractionDigits),\r\n    mm: (x: number) => round(toNumber(x * 1000), roundingFractionDigits),\r\n    km: (x: number) => round(toNumber(x * 0.001), roundingFractionDigits),\r\n    cm: (x: number) => round(toNumber(x * 100), roundingFractionDigits),\r\n    in: (x: number) => round(toNumber(x * 39.37008), roundingFractionDigits),\r\n    ft: (x: number) => round(toNumber(x * 3.28084), roundingFractionDigits),\r\n    yd: (x: number) => round(toNumber(x * 1.09361), roundingFractionDigits),\r\n    mi: (x: number) => round(toNumber(x * 0.00062), roundingFractionDigits)\r\n  },\r\n  toBaseFrom: {\r\n    m: (x: number) => round(toNumber(x), roundingFractionDigits),\r\n    mm: (x: number) => round(toNumber(x * 0.001), roundingFractionDigits),\r\n    km: (x: number) => round(toNumber(x * 1000), roundingFractionDigits),\r\n    cm: (x: number) => round(toNumber(x * 0.01), roundingFractionDigits),\r\n    in: (x: number) => round(toNumber(x * 0.0254), roundingFractionDigits),\r\n    ft: (x: number) => round(toNumber(x * 0.3048), roundingFractionDigits),\r\n    yd: (x: number) => round(toNumber(x * 0.9144), roundingFractionDigits),\r\n    mi: (x: number) => round(toNumber(x * 1609.344), roundingFractionDigits)\r\n  }\r\n};\r\n\r\nconst defaults = {\r\n  inputCode: \"ft\",\r\n  targetCode: \"m\",\r\n  favoriteCodes: Object.keys(unitsMap) as T_FavoriteCodes\r\n};\r\n\r\nconst lengthConstants = {\r\n  unitsMap,\r\n  baseUnit,\r\n  defaults,\r\n  conversionRates,\r\n  conversionFormulas\r\n};\r\n\r\nexport default lengthConstants;\r\n","export function toNumber(x: any) {\r\n  return +x;\r\n}\r\n\r\nexport function round(num: number | string, fractionDigits: number = 2) {\r\n  return toNumber(toNumber(num).toFixed(fractionDigits));\r\n}\r\n"],"names":["unitsMap","mm","name","symbol","cm","m","km","in","ft","yd","mi","conversionFormulas","baseUnitCode","fromBaseTo","x","round","toNumber","toBaseFrom","defaults","inputCode","targetCode","favoriteCodes","Object","keys","baseUnit","conversionRates","num","fractionDigits","arguments","length","undefined","toFixed"],"sourceRoot":""}